var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import QrScannerEngine from 'qr-scanner';
import { useEffect, useMemo, useState } from 'react';
export function Camera(props) {
    var onVideo = props.onVideo, constraints = props.constraints, videoProps = __rest(props, ["onVideo", "constraints"]);
    var _a = useState(null), video = _a[0], setVideo = _a[1];
    var streamPromise = useMemo(function () {
        return navigator.mediaDevices.getUserMedia(constraints || { video: { facingMode: 'environment' }, audio: false });
    }, [constraints]);
    useMemo(function () {
        streamPromise.catch(function (err) {
            return console.error('failed to get user media:', err);
        });
    }, [streamPromise]);
    useEffect(function () {
        streamPromise.then(function (stream) {
            if (!video) {
                return;
            }
            video.srcObject = stream;
            video.onloadedmetadata = function () {
                video.play();
                onVideo(video);
            };
        });
        return function () { };
    }, [video, streamPromise, onVideo]);
    useEffect(function () {
        return function () {
            streamPromise.then(function (stream) {
                stream.getVideoTracks().forEach(function (track) { return stream.removeTrack(track); });
            });
        };
    }, [streamPromise]);
    return _jsx("video", __assign({}, videoProps, { ref: setVideo }), void 0);
}
export function VideoQrScanner(props) {
    var video = props.video, onQrCode = props.onQrCode;
    useEffect(function () {
        var qrScanner = new QrScannerEngine(video, onQrCode);
        qrScanner.start();
        return function () {
            qrScanner.stop();
        };
    }, [video, onQrCode]);
    return _jsx(_Fragment, {}, void 0);
}
export function ContinuousQrScanner(props) {
    var onQrCode = props.onQrCode, videoProps = __rest(props, ["onQrCode"]);
    var _a = useState(null), video = _a[0], setVideo = _a[1];
    return (_jsxs(_Fragment, { children: [_jsx(Camera, __assign({ onVideo: setVideo }, videoProps), void 0),
            video && _jsx(VideoQrScanner, { video: video, onQrCode: onQrCode }, void 0)] }, void 0));
}
export function OneOffQrScanner(props) {
    var onQrCode = props.onQrCode, videoProps = __rest(props, ["onQrCode"]);
    var _a = useState(false), hasShown = _a[0], setHasShown = _a[1];
    function oneOffOnQrCode(qrCode) {
        onQrCode(qrCode);
        setHasShown(true);
    }
    if (hasShown) {
        return _jsx(_Fragment, {}, void 0);
    }
    return _jsx(ContinuousQrScanner, __assign({ onQrCode: oneOffOnQrCode }, videoProps), void 0);
}
export default OneOffQrScanner;
//# sourceMappingURL=webcam-qr-scanner.js.map