{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeScanner() {\n  _s();\n\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  const [text, setText] = useState('Not yet scanned');\n\n  const askForCameraPermission = () => {\n    (async () => {\n      const {\n        status\n      } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }; // Request Camera Permission\n\n\n  useEffect(() => {\n    askForCameraPermission();\n  }, []); // What happens when we scan the bar code\n\n  const handleBarCodeScanned = _ref => {\n    let {\n      type,\n      data\n    } = _ref;\n    setScanned(true);\n    setText(data);\n    console.log('Type: ' + type + '\\nData: ' + data);\n  }; // Check permissions and return the screens\n\n\n  if (hasPermission === null) {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Requesting for camera permission\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (hasPermission === false) {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          margin: 10\n        },\n        children: \"No access to camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: 'Allow Camera',\n        onPress: () => askForCameraPermission()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  } // Return the View\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"\",\n    children: /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(View, {\n        style: styles.barcodebox,\n        children: /*#__PURE__*/_jsxDEV(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n          style: {\n            height: 400,\n            width: 400\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        style: styles.maintext,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), scanned && /*#__PURE__*/_jsxDEV(Button, {\n        title: 'Scan again?',\n        onPress: () => setScanned(false),\n        color: \"tomato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CodeScanner, \"LSH2pEA0cbF9HcPKWRcjLaCwgaY=\");\n\n_c = CodeScanner;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  maintext: {\n    fontSize: 16,\n    margin: 20\n  },\n  barcodebox: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 300,\n    width: 300,\n    overflow: 'hidden',\n    borderRadius: 30,\n    backgroundColor: 'tomato'\n  }\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeScanner\");","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js"],"names":["React","useState","useEffect","Text","View","StyleSheet","Button","BarCodeScanner","CodeScanner","hasPermission","setHasPermission","scanned","setScanned","text","setText","askForCameraPermission","status","requestPermissionsAsync","handleBarCodeScanned","type","data","console","log","styles","container","margin","barcodebox","undefined","height","width","maintext","create","flex","backgroundColor","alignItems","justifyContent","fontSize","overflow","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function CodeScanner() {\n    const [hasPermission, setHasPermission] = useState(null);\n    const [scanned, setScanned] = useState(false);\n    const [text, setText] = useState('Not yet scanned')\n\n    const askForCameraPermission = () => {\n        (async () => {\n            const { status } = await BarCodeScanner.requestPermissionsAsync();\n            setHasPermission(status === 'granted');\n        })()\n    }\n\n    // Request Camera Permission\n    useEffect(() => {\n        askForCameraPermission();\n    }, []);\n\n    // What happens when we scan the bar code\n    const handleBarCodeScanned = ({ type, data }) => {\n        setScanned(true);\n        setText(data)\n        console.log('Type: ' + type + '\\nData: ' + data)\n    };\n\n    // Check permissions and return the screens\n    if (hasPermission === null) {\n        return (\n            <View style={styles.container}>\n                <Text>Requesting for camera permission</Text>\n            </View>)\n    }\n    if (hasPermission === false) {\n        return (\n            <View style={styles.container}>\n                <Text style={{ margin: 10 }}>No access to camera</Text>\n                <Button title={'Allow Camera'} onPress={() => askForCameraPermission()} />\n            </View>)\n    }\n\n    // Return the View\n    return (\n        <div class=\"\">\n            <View style={styles.container}>\n                <View style={styles.barcodebox}>\n                    <BarCodeScanner\n                        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n                        style={{ height: 400, width: 400 }} />\n                </View>\n                <Text style={styles.maintext}>{text}</Text>\n\n                {scanned && <Button title={'Scan again?'} onPress={() => setScanned(false)} color='tomato' />}\n            </View>\n        </div>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    maintext: {\n        fontSize: 16,\n        margin: 20,\n    },\n    barcodebox: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: 300,\n        width: 300,\n        overflow: 'hidden',\n        borderRadius: 30,\n        backgroundColor: 'tomato'\n    }\n});"]},"metadata":{},"sourceType":"module"}