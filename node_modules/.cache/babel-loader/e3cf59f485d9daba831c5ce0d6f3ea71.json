{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js\";\nimport React from \"react\";\nimport { toast } from 'react-toastify';\nimport \"../../../../css/createMedicine.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreateMedicine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMedicine = event => {\n      this.setState({\n        medicine: event.target.value\n      });\n    };\n\n    this.getNeedsPrescription = event => {\n      this.setState({\n        needsPrescription: event.target.value\n      });\n    };\n\n    this.getAmount = event => {\n      this.setState({\n        amount: event.target.value\n      });\n    };\n\n    this.getPrice = event => {\n      this.setState({\n        price: event.target.value\n      });\n    };\n\n    this.getSlotID = event => {\n      this.setState({\n        slotID: event.target.value\n      });\n    };\n\n    this.state = {\n      medicine: \"\",\n      needsPrescription: null,\n      medicines: [],\n      url: null,\n      amount: '',\n      price: '',\n      currentMedicine: '',\n      slotID: ''\n    };\n    this.getMedicine = this.getMedicine.bind(this);\n    this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n    this.getAmount = this.getAmount.bind(this);\n    this.getPrice = this.getPrice.bind(this);\n    this.getSlotID = this.getSlotID.bind(this);\n  }\n\n  componentWillMount() {\n    const url = new URL(window.location.href);\n\n    if (url.pathname === '/addMedicineToMachine') {\n      this.setState({\n        pathname: url.pathname\n      });\n      let headers = new Headers();\n      headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem(\"email\") + \":\" + localStorage.getItem(\"password\")));\n      headers.set('Content-Type', 'application/json');\n      fetch(\"http://localhost:8081/medicines\", {\n        headers: headers\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          medicines: data.sort((a, b) => a.name.localeCompare(b.name))\n        });\n      });\n    }\n\n    this.form = document.querySelector('#create-account-form');\n    this.medicineInput = document.querySelector('#medicine');\n    this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n    this.amountInput = document.querySelector('#amount');\n    this.priceInput = document.querySelector('#price');\n    this.slotIpnut = document.querySelector('#slotID');\n  }\n\n  createMedicine() {\n    this.validateForm();\n\n    if (this.isFormValid() === true) {\n      if (this.state.pathname) {\n        let headers = new Headers();\n        headers.set('Content-Type', 'application/json');\n        headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n        fetch(sessionStorage.getItem(\"machineIP\") + \"/medicines\", {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify([{\n            \"name\": this.state.currentMedicine.name,\n            \"price\": this.state.price,\n            \"amount\": this.amount,\n            \"needsPrescription\": this.state.currentMedicine.needsPrescription\n          }])\n        }).then(r => {\n          if (r.status === 200) {\n            fetch(sessionStorage.getItem(\"machineIP\") + \"/configuration/router/mapping\", {\n              method: \"POST\",\n              headers: headers,\n              body: JSON.stringify([{\n                \"name\": this.state.currentMedicine.name,\n                \"slotID\": this.state.slotID\n              }])\n            }).then(resp => {\n              if (resp.status === 200) {\n                toast.success(\"Medicine created!\");\n              } else {\n                toast.error(\"Invalid slot ID\");\n              }\n            });\n          } else {\n            fetch(sessionStorage.getItem(\"machineIP\") + \"/medicines\", {\n              method: \"PUT\",\n              headers: headers,\n              body: JSON.stringify([{\n                \"name\": this.state.currentMedicine.name,\n                \"price\": this.state.price,\n                \"amount\": this.amount,\n                \"needsPrescription\": this.state.currentMedicine.needsPrescription\n              }])\n            });\n          }\n        });\n      } else {\n        let headers = new Headers();\n        headers.set('Content-Type', 'application/json');\n        headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n        fetch(\"http://localhost:8081/medicines\", {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify([{\n            \"name\": this.state.medicine,\n            \"needsPrescription\": this.state.needsPrescription\n          }])\n        }).then(r => {\n          if (r.status === 200) {\n            toast.success(\"Medicine created!\");\n          } else toast.error(\"Medicine already exists!\");\n\n          this.setError(this.medicineInput);\n        });\n      }\n    }\n  }\n\n  validateForm() {\n    if (this.state.pathname) {\n      if (!this.state.medicines.includes(this.state.medicine.value)) {\n        this.setError(this.medicineInput, \"Invalid medicine\");\n      } else {\n        this.state.medicines.forEach(element => {\n          if (element.name === this.state.medicine) this.setState({\n            currentMedicine: element\n          });\n        });\n        this.setSuccess(this.medicineInput);\n      }\n\n      if (this.state.amount.trim() === '') {\n        this.setError(this.amountInput, 'Enter amount');\n      } else {\n        this.setSuccess(this.amountInput);\n      }\n\n      if (this.state.price.trim() === '') {\n        this.setError(this.priceInput, 'Enter price');\n      } else {\n        this.setSuccess(this.priceInput);\n      }\n\n      if (this.state.slotID.trim() === '') {\n        this.setError(this.slotInput, 'Provide slot id');\n      } else {\n        this.setSuccess(this.slotInput);\n      }\n    } else {\n      if (this.state.medicine.trim() === '') {\n        this.setError(this.medicineInput, 'Provide medicine');\n      } else {\n        this.setSuccess(this.medicineInput);\n      }\n\n      if (this.state.needsPrescription === null) {\n        this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n      } else this.setSuccess(this.needsPrescriptionInput);\n    }\n  }\n\n  isFormValid() {\n    const inputContainers = this.form.querySelectorAll('.input-group');\n    let result = true;\n    inputContainers.forEach(container => {\n      if (container.classList.contains('error')) {\n        result = false;\n      }\n    });\n    return result;\n  }\n\n  setError(element, errorMessage) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('success')) {\n      parent.classList.remove('success');\n    }\n\n    parent.classList.add('error');\n    const paragraph = parent.querySelector('p');\n    paragraph.textContent = errorMessage;\n  }\n\n  setSuccess(element) {\n    const parent = element.parentElement;\n    console.log(element);\n\n    if (parent.classList.contains('error')) {\n      parent.classList.remove('error');\n    }\n\n    parent.classList.add('success');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"login\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-account-form\",\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), this.state.pathname ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"medicine\",\n              children: \"Medicine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              list: \"medicines\",\n              name: \"medicine\",\n              value: this.state.medicineInput,\n              onChange: event => {\n                this.getMedicine(event);\n              },\n              id: \"medicine\",\n              autoComplete: \"off\",\n              placeholder: \"Choose medicine:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n              id: \"medicines\",\n              children: this.state.medicines.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: element.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"amount\",\n              children: \"Total amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"amount\",\n              value: this.state.amountInput,\n              onChange: event => {\n                this.getAmount(event);\n              },\n              id: \"amount\",\n              autoComplete: \"off\",\n              placeholder: \"Amount:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"price\",\n              children: \"Medicine Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              name: \"price\",\n              value: this.state.priceInput,\n              onChange: event => {\n                this.getPrice(event);\n              },\n              id: \"price\",\n              autoComplete: \"off\",\n              placeholder: \"Price:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"slotId\",\n              children: \"Slot ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"slotId\",\n              value: this.state.slotIput,\n              onChange: event => {\n                this.getSlotID(event);\n              },\n              id: \"slotID\",\n              autoComplete: \"off\",\n              placeholder: \"Slot ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"medicine\",\n              children: \"medicine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"medicine\",\n              value: this.state.medicineInput,\n              onChange: event => {\n                this.getMedicine(event);\n              },\n              id: \"medicine\",\n              autoComplete: \"off\",\n              placeholder: \"Choose medicine:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"needsPrescription\",\n              children: \"Needs Prescription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"needsPrescription\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"passive\",\n                onClick: event => {\n                  event.target.className = 'active';\n                  event.target.nextSibling.className = 'passive';\n                  this.setState({\n                    needsPrescription: true\n                  });\n                },\n                children: \"needs prescription\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"passive\",\n                onClick: event => {\n                  event.target.className = 'active';\n                  event.target.previousSibling.className = 'passive';\n                  this.setState({\n                    needsPrescription: false\n                  });\n                },\n                children: \"doesn't need prescription\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: () => this.createMedicine(),\n          children: \"Create Medicine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CreateMedicine;","map":{"version":3,"sources":["/home/vpaligorov/Desktop/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js"],"names":["React","toast","CreateMedicine","Component","constructor","props","getMedicine","event","setState","medicine","target","value","getNeedsPrescription","needsPrescription","getAmount","amount","getPrice","price","getSlotID","slotID","state","medicines","url","currentMedicine","bind","componentWillMount","URL","window","location","href","pathname","headers","Headers","set","btoa","localStorage","getItem","fetch","then","response","json","data","sort","a","b","name","localeCompare","form","document","querySelector","medicineInput","needsPrescriptionInput","amountInput","priceInput","slotIpnut","createMedicine","validateForm","isFormValid","sessionStorage","method","body","JSON","stringify","r","status","resp","success","error","setError","includes","forEach","element","setSuccess","trim","slotInput","inputContainers","querySelectorAll","result","container","classList","contains","errorMessage","parent","parentElement","remove","add","paragraph","textContent","console","log","render","map","slotIput","className","nextSibling","previousSibling"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,oCAAP;;;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAQzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAYnBC,WAZmB,GAYJC,KAAD,IAAW;AACrB,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AADb,OAAd;AAGH,KAhBkB;;AAAA,SAkBnBC,oBAlBmB,GAkBKL,KAAD,IAAW;AAC9B,WAAKC,QAAL,CAAc;AACVK,QAAAA,iBAAiB,EAAEN,KAAK,CAACG,MAAN,CAAaC;AADtB,OAAd;AAGH,KAtBkB;;AAAA,SAwBnBG,SAxBmB,GAwBNP,KAAD,IAAW;AACnB,WAAKC,QAAL,CAAc;AACVO,QAAAA,MAAM,EAAER,KAAK,CAACG,MAAN,CAAaC;AADX,OAAd;AAGH,KA5BkB;;AAAA,SA8BnBK,QA9BmB,GA8BPT,KAAD,IAAW;AAClB,WAAKC,QAAL,CAAc;AACVS,QAAAA,KAAK,EAAEV,KAAK,CAACG,MAAN,CAAaC;AADV,OAAd;AAGH,KAlCkB;;AAAA,SAoCnBO,SApCmB,GAoCNX,KAAD,IAAW;AACnB,WAAKC,QAAL,CAAc;AACVW,QAAAA,MAAM,EAAEZ,KAAK,CAACG,MAAN,CAAaC;AADX,OAAd;AAGH,KAxCkB;;AAEf,SAAKS,KAAL,GAAa;AACTX,MAAAA,QAAQ,EAAE,EADD;AACKI,MAAAA,iBAAiB,EAAE,IADxB;AAC8BQ,MAAAA,SAAS,EAAE,EADzC;AAC6CC,MAAAA,GAAG,EAAE,IADlD;AACwDP,MAAAA,MAAM,EAAE,EADhE;AACoEE,MAAAA,KAAK,EAAE,EAD3E;AAC+EM,MAAAA,eAAe,EAAE,EADhG;AACoGJ,MAAAA,MAAM,EAAE;AAD5G,KAAb;AAGA,SAAKb,WAAL,GAAmB,KAAKA,WAAL,CAAiBkB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKZ,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BY,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKV,SAAL,GAAiB,KAAKA,SAAL,CAAeU,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKR,QAAL,GAAgB,KAAKA,QAAL,CAAcQ,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAeM,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAgCDC,EAAAA,kBAAkB,GAAG;AACjB,UAAMH,GAAG,GAAG,IAAII,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAAZ;;AAEA,QAAIP,GAAG,CAACQ,QAAJ,KAAiB,uBAArB,EAA8C;AAC1C,WAAKtB,QAAL,CAAc;AAAEsB,QAAAA,QAAQ,EAAER,GAAG,CAACQ;AAAhB,OAAd;AACA,UAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd;AACAD,MAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6B,WAAWC,IAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,GAAhC,GAAsCD,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAvC,CAA5C;AACAL,MAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;AACAI,MAAAA,KAAK,CAAC,iCAAD,EAAoC;AACrCN,QAAAA,OAAO,EAAEA;AAD4B,OAApC,CAAL,CAGKO,IAHL,CAGUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHtB,EAIKF,IAJL,CAIUG,IAAI,IAAI;AACV,aAAKjC,QAAL,CAAc;AAAEa,UAAAA,SAAS,EAAEoB,IAAI,CAACC,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,CAAOC,aAAP,CAAqBF,CAAC,CAACC,IAAvB,CAApB;AAAb,SAAd;AACH,OANL;AAOH;;AACD,SAAKE,IAAL,GAAYC,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAAZ;AACA,SAAKC,aAAL,GAAqBF,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAArB;AACA,SAAKE,sBAAL,GAA8BH,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CAA9B;AACA,SAAKG,WAAL,GAAmBJ,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAnB;AACA,SAAKI,UAAL,GAAkBL,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;AACA,SAAKK,SAAL,GAAiBN,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAjB;AACH;;AAEDM,EAAAA,cAAc,GAAG;AACb,SAAKC,YAAL;;AACA,QAAI,KAAKC,WAAL,OAAuB,IAA3B,EAAiC;AAC7B,UAAI,KAAKrC,KAAL,CAAWU,QAAf,EAAyB;AACrB,YAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd;AACAD,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;AACAF,QAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6B,WAAWC,IAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,GAAhC,GAAsCD,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAvC,CAA5C;AACAC,QAAAA,KAAK,CAACqB,cAAc,CAACtB,OAAf,CAAuB,WAAvB,IAAsC,YAAvC,EAAqD;AACtDuB,UAAAA,MAAM,EAAE,MAD8C;AAEtD5B,UAAAA,OAAO,EAAEA,OAF6C;AAGtD6B,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,CACjB;AACI,oBAAQ,KAAK1C,KAAL,CAAWG,eAAX,CAA2BsB,IADvC;AAEI,qBAAS,KAAKzB,KAAL,CAAWH,KAFxB;AAGI,sBAAU,KAAKF,MAHnB;AAII,iCAAqB,KAAKK,KAAL,CAAWG,eAAX,CAA2BV;AAJpD,WADiB,CAAf;AAHgD,SAArD,CAAL,CAYGyB,IAZH,CAYQyB,CAAC,IAAI;AACT,cAAIA,CAAC,CAACC,MAAF,KAAa,GAAjB,EAAsB;AAClB3B,YAAAA,KAAK,CAACqB,cAAc,CAACtB,OAAf,CAAuB,WAAvB,IAAsC,+BAAvC,EAAwE;AACzEuB,cAAAA,MAAM,EAAE,MADiE;AAEzE5B,cAAAA,OAAO,EAAEA,OAFgE;AAGzE6B,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,CACjB;AACI,wBAAQ,KAAK1C,KAAL,CAAWG,eAAX,CAA2BsB,IADvC;AAEI,0BAAU,KAAKzB,KAAL,CAAWD;AAFzB,eADiB,CAAf;AAHmE,aAAxE,CAAL,CASGmB,IATH,CASQ2B,IAAI,IAAI;AACZ,kBAAGA,IAAI,CAACD,MAAL,KAAgB,GAAnB,EAAuB;AACnB/D,gBAAAA,KAAK,CAACiE,OAAN,CAAc,mBAAd;AACH,eAFD,MAEK;AACDjE,gBAAAA,KAAK,CAACkE,KAAN,CAAY,iBAAZ;AACH;AACJ,aAfD;AAgBH,WAjBD,MAkBK;AACD9B,YAAAA,KAAK,CAACqB,cAAc,CAACtB,OAAf,CAAuB,WAAvB,IAAsC,YAAvC,EAAqD;AACtDuB,cAAAA,MAAM,EAAE,KAD8C;AAEtD5B,cAAAA,OAAO,EAAEA,OAF6C;AAGtD6B,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,CACjB;AACI,wBAAQ,KAAK1C,KAAL,CAAWG,eAAX,CAA2BsB,IADvC;AAEI,yBAAS,KAAKzB,KAAL,CAAWH,KAFxB;AAGI,0BAAU,KAAKF,MAHnB;AAII,qCAAqB,KAAKK,KAAL,CAAWG,eAAX,CAA2BV;AAJpD,eADiB,CAAf;AAHgD,aAArD,CAAL;AAaH;AACJ,SA9CD;AAgDH,OApDD,MAoDO;AACH,YAAIkB,OAAO,GAAG,IAAIC,OAAJ,EAAd;AACAD,QAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;AACAF,QAAAA,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6B,WAAWC,IAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,GAAhC,GAAsCD,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAvC,CAA5C;AACAC,QAAAA,KAAK,CAAC,iCAAD,EAAoC;AACrCsB,UAAAA,MAAM,EAAE,MAD6B;AAErC5B,UAAAA,OAAO,EAAEA,OAF4B;AAGrC6B,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,CACjB;AACI,oBAAQ,KAAK1C,KAAL,CAAWX,QADvB;AAEI,iCAAqB,KAAKW,KAAL,CAAWP;AAFpC,WADiB,CAAf;AAH+B,SAApC,CAAL,CAUGyB,IAVH,CAUQyB,CAAC,IAAI;AACT,cAAIA,CAAC,CAACC,MAAF,KAAa,GAAjB,EAAsB;AAClB/D,YAAAA,KAAK,CAACiE,OAAN,CAAc,mBAAd;AACH,WAFD,MAIIjE,KAAK,CAACkE,KAAN,CAAY,0BAAZ;;AACA,eAAKC,QAAL,CAAc,KAAKlB,aAAnB;AACP,SAjBD;AAkBH;AAEJ;AACJ;;AAGDM,EAAAA,YAAY,GAAG;AACX,QAAI,KAAKpC,KAAL,CAAWU,QAAf,EAAyB;AACrB,UAAI,CAAC,KAAKV,KAAL,CAAWC,SAAX,CAAqBgD,QAArB,CAA8B,KAAKjD,KAAL,CAAWX,QAAX,CAAoBE,KAAlD,CAAL,EAA+D;AAC3D,aAAKyD,QAAL,CAAc,KAAKlB,aAAnB,EAAkC,kBAAlC;AACH,OAFD,MAGI;AACI,aAAK9B,KAAL,CAAWC,SAAX,CAAqBiD,OAArB,CAA8BC,OAAD,IAAW;AACpC,cAAGA,OAAO,CAAC1B,IAAR,KAAiB,KAAKzB,KAAL,CAAWX,QAA/B,EACI,KAAKD,QAAL,CAAc;AAACe,YAAAA,eAAe,EAAEgD;AAAlB,WAAd;AACP,SAHD;AAIA,aAAKC,UAAL,CAAgB,KAAKtB,aAArB;AACH;;AAEL,UAAI,KAAK9B,KAAL,CAAWL,MAAX,CAAkB0D,IAAlB,OAA6B,EAAjC,EAAqC;AACjC,aAAKL,QAAL,CAAc,KAAKhB,WAAnB,EAAgC,cAAhC;AACH,OAFD,MAEO;AACH,aAAKoB,UAAL,CAAgB,KAAKpB,WAArB;AACH;;AAED,UAAI,KAAKhC,KAAL,CAAWH,KAAX,CAAiBwD,IAAjB,OAA4B,EAAhC,EAAoC;AAChC,aAAKL,QAAL,CAAc,KAAKf,UAAnB,EAA+B,aAA/B;AACH,OAFD,MAEO;AACH,aAAKmB,UAAL,CAAgB,KAAKnB,UAArB;AACH;;AAED,UAAI,KAAKjC,KAAL,CAAWD,MAAX,CAAkBsD,IAAlB,OAA6B,EAAjC,EAAqC;AACjC,aAAKL,QAAL,CAAc,KAAKM,SAAnB,EAA8B,iBAA9B;AACH,OAFD,MAEO;AACH,aAAKF,UAAL,CAAgB,KAAKE,SAArB;AACH;AACJ,KA7BD,MA+BK;AACD,UAAI,KAAKtD,KAAL,CAAWX,QAAX,CAAoBgE,IAApB,OAA+B,EAAnC,EAAuC;AACnC,aAAKL,QAAL,CAAc,KAAKlB,aAAnB,EAAkC,kBAAlC;AACH,OAFD,MAEO;AACH,aAAKsB,UAAL,CAAgB,KAAKtB,aAArB;AACH;;AACD,UAAI,KAAK9B,KAAL,CAAWP,iBAAX,KAAiC,IAArC,EAA2C;AACvC,aAAKuD,QAAL,CAAc,KAAKjB,sBAAnB,EAA2C,gBAA3C;AACH,OAFD,MAGI,KAAKqB,UAAL,CAAgB,KAAKrB,sBAArB;AACP;AACJ;;AAGDM,EAAAA,WAAW,GAAG;AACV,UAAMkB,eAAe,GAAG,KAAK5B,IAAL,CAAU6B,gBAAV,CAA2B,cAA3B,CAAxB;AACA,QAAIC,MAAM,GAAG,IAAb;AACAF,IAAAA,eAAe,CAACL,OAAhB,CAAyBQ,SAAD,IAAe;AACnC,UAAIA,SAAS,CAACC,SAAV,CAAoBC,QAApB,CAA6B,OAA7B,CAAJ,EAA2C;AACvCH,QAAAA,MAAM,GAAG,KAAT;AACH;AACJ,KAJD;AAKA,WAAOA,MAAP;AACH;;AAEDT,EAAAA,QAAQ,CAACG,OAAD,EAAUU,YAAV,EAAwB;AAC5B,UAAMC,MAAM,GAAGX,OAAO,CAACY,aAAvB;;AACA,QAAID,MAAM,CAACH,SAAP,CAAiBC,QAAjB,CAA0B,SAA1B,CAAJ,EAA0C;AACtCE,MAAAA,MAAM,CAACH,SAAP,CAAiBK,MAAjB,CAAwB,SAAxB;AACH;;AACDF,IAAAA,MAAM,CAACH,SAAP,CAAiBM,GAAjB,CAAqB,OAArB;AACA,UAAMC,SAAS,GAAGJ,MAAM,CAACjC,aAAP,CAAqB,GAArB,CAAlB;AACAqC,IAAAA,SAAS,CAACC,WAAV,GAAwBN,YAAxB;AACH;;AAEDT,EAAAA,UAAU,CAACD,OAAD,EAAU;AAChB,UAAMW,MAAM,GAAGX,OAAO,CAACY,aAAvB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ;;AACA,QAAIW,MAAM,CAACH,SAAP,CAAiBC,QAAjB,CAA0B,OAA1B,CAAJ,EAAwC;AACpCE,MAAAA,MAAM,CAACH,SAAP,CAAiBK,MAAjB,CAAwB,OAAxB;AACH;;AACDF,IAAAA,MAAM,CAACH,SAAP,CAAiBM,GAAjB,CAAqB,SAArB;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA,6BACI;AAAM,QAAA,EAAE,EAAC,qBAAT;AAA+B,QAAA,SAAS,EAAC,SAAzC;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,EAKQ,KAAKtE,KAAL,CAAWU,QAAX,gBACI;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,IAAI,EAAC,WAAZ;AAAwB,cAAA,IAAI,EAAC,UAA7B;AAAwC,cAAA,KAAK,EAAE,KAAKV,KAAL,CAAW8B,aAA1D;AAAyE,cAAA,QAAQ,EAAE3C,KAAK,IAAI;AACxF,qBAAKD,WAAL,CAAiBC,KAAjB;AACH,eAFD;AAEG,cAAA,EAAE,EAAC,UAFN;AAEiB,cAAA,YAAY,EAAC,KAF9B;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAU,cAAA,EAAE,EAAC,WAAb;AAAA,wBACK,KAAKa,KAAL,CAAWC,SAAX,CAAqBsE,GAArB,CAAyBpB,OAAO,iBAC7B;AAAQ,gBAAA,KAAK,EAAEA,OAAO,CAAC1B;AAAvB;AAAA;AAAA;AAAA;AAAA,sBADH;AADL;AAAA;AAAA;AAAA;AAAA,oBANJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAeI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,IAAI,EAAC,QAA1B;AAAmC,cAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWgC,WAArD;AAAkE,cAAA,QAAQ,EAAE7C,KAAK,IAAI;AACjF,qBAAKO,SAAL,CAAeP,KAAf;AACH,eAFD;AAEG,cAAA,EAAE,EAAC,QAFN;AAEe,cAAA,YAAY,EAAC,KAF5B;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfJ,eAwBI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,IAAI,EAAC,MAA1B;AAAiC,cAAA,IAAI,EAAC,OAAtC;AAA8C,cAAA,KAAK,EAAE,KAAKa,KAAL,CAAWiC,UAAhE;AAA4E,cAAA,QAAQ,EAAE9C,KAAK,IAAI;AAC3F,qBAAKS,QAAL,CAAcT,KAAd;AACH,eAFD;AAEG,cAAA,EAAE,EAAC,OAFN;AAEc,cAAA,YAAY,EAAC,KAF3B;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxBJ,eAiCI;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,IAAI,EAAC,QAAZ;AAAqB,cAAA,IAAI,EAAC,QAA1B;AAAmC,cAAA,KAAK,EAAE,KAAKa,KAAL,CAAWwE,QAArD;AAA+D,cAAA,QAAQ,EAAErF,KAAK,IAAI;AAC9E,qBAAKW,SAAL,CAAeX,KAAf;AACH,eAFD;AAEG,cAAA,EAAE,EAAC,QAFN;AAEe,cAAA,YAAY,EAAC,KAF5B;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjCJ;AAAA,wBADJ,gBA4CM;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,IAAI,EAAC,UAAZ;AAAuB,cAAA,KAAK,EAAE,KAAKa,KAAL,CAAW8B,aAAzC;AAAwD,cAAA,QAAQ,EAAE3C,KAAK,IAAI;AACvE,qBAAKD,WAAL,CAAiBC,KAAjB;AACH,eAFD;AAEG,cAAA,EAAE,EAAC,UAFN;AAEiB,cAAA,YAAY,EAAC,KAF9B;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI;AAAO,cAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,EAAE,EAAC,mBAAR;AAAA,sCACI;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,SAAS,EAAC,SAAhC;AAA0C,gBAAA,OAAO,EAAGA,KAAD,IAAW;AAAEA,kBAAAA,KAAK,CAACG,MAAN,CAAamF,SAAb,GAAyB,QAAzB;AAAmCtF,kBAAAA,KAAK,CAACG,MAAN,CAAaoF,WAAb,CAAyBD,SAAzB,GAAqC,SAArC;AAAgD,uBAAKrF,QAAL,CAAc;AAAEK,oBAAAA,iBAAiB,EAAE;AAArB,mBAAd;AAA4C,iBAA/L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,SAAS,EAAC,SAAhC;AAA0C,gBAAA,OAAO,EAAGN,KAAD,IAAW;AAAEA,kBAAAA,KAAK,CAACG,MAAN,CAAamF,SAAb,GAAyB,QAAzB;AAAmCtF,kBAAAA,KAAK,CAACG,MAAN,CAAaqF,eAAb,CAA6BF,SAA7B,GAAyC,SAAzC;AAAoD,uBAAKrF,QAAL,CAAc;AAAEK,oBAAAA,iBAAiB,EAAE;AAArB,mBAAd;AAA6C,iBAApM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA,wBAjDd,eAsEI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,KAAhC;AAAsC,UAAA,OAAO,EAAE,MAAM,KAAK0C,cAAL,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA4EH;;AAtTwC;;AAyT7C,eAAerD,cAAf","sourcesContent":["import React from \"react\";\n\nimport { toast } from 'react-toastify';\nimport \"../../../../css/createMedicine.css\"\n\nclass CreateMedicine extends React.Component {\n    form;\n    medicineInput;\n    needsPrescriptionInput;\n    amountInput;\n    priceInput;\n    slotInput\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            medicine: \"\", needsPrescription: null, medicines: [], url: null, amount: '', price: '', currentMedicine: '', slotID: ''\n        };\n        this.getMedicine = this.getMedicine.bind(this);\n        this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n        this.getAmount = this.getAmount.bind(this);\n        this.getPrice = this.getPrice.bind(this);\n        this.getSlotID = this.getSlotID.bind(this);\n    }\n\n    getMedicine = (event) => {\n        this.setState({\n            medicine: event.target.value\n        })\n    };\n\n    getNeedsPrescription = (event) => {\n        this.setState({\n            needsPrescription: event.target.value\n        })\n    };\n\n    getAmount = (event) => {\n        this.setState({\n            amount: event.target.value\n        })\n    };\n\n    getPrice = (event) => {\n        this.setState({\n            price: event.target.value\n        })\n    };\n\n    getSlotID = (event) => {\n        this.setState({\n            slotID: event.target.value\n        })\n    };\n\n    componentWillMount() {\n        const url = new URL(window.location.href);\n\n        if (url.pathname === '/addMedicineToMachine') {\n            this.setState({ pathname: url.pathname });\n            let headers = new Headers();\n            headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem(\"email\") + \":\" + localStorage.getItem(\"password\")));\n            headers.set('Content-Type', 'application/json');\n            fetch(\"http://localhost:8081/medicines\", {\n                headers: headers,\n            })\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ medicines: data.sort((a, b) => a.name.localeCompare(b.name)) })\n                })\n        }\n        this.form = document.querySelector('#create-account-form');\n        this.medicineInput = document.querySelector('#medicine');\n        this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n        this.amountInput = document.querySelector('#amount');\n        this.priceInput = document.querySelector('#price');\n        this.slotIpnut = document.querySelector('#slotID');\n    }\n\n    createMedicine() {\n        this.validateForm();\n        if (this.isFormValid() === true) {\n            if (this.state.pathname) {\n                let headers = new Headers();\n                headers.set('Content-Type', 'application/json');\n                headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n                fetch(sessionStorage.getItem(\"machineIP\") + \"/medicines\", {\n                    method: \"POST\",\n                    headers: headers,\n                    body: JSON.stringify([\n                        {\n                            \"name\": this.state.currentMedicine.name,\n                            \"price\": this.state.price,\n                            \"amount\": this.amount,\n                            \"needsPrescription\": this.state.currentMedicine.needsPrescription\n                        }\n                    ])\n\n                }).then(r => {\n                    if (r.status === 200) {\n                        fetch(sessionStorage.getItem(\"machineIP\") + \"/configuration/router/mapping\", {\n                            method: \"POST\",\n                            headers: headers,\n                            body: JSON.stringify([\n                                {\n                                    \"name\": this.state.currentMedicine.name,\n                                    \"slotID\": this.state.slotID,\n                                }\n                            ])\n                        }).then(resp => {\n                            if(resp.status === 200){\n                                toast.success(\"Medicine created!\")\n                            }else{\n                                toast.error(\"Invalid slot ID\")\n                            }\n                        })\n                    }\n                    else {\n                        fetch(sessionStorage.getItem(\"machineIP\") + \"/medicines\", {\n                            method: \"PUT\",\n                            headers: headers,\n                            body: JSON.stringify([\n                                {\n                                    \"name\": this.state.currentMedicine.name,\n                                    \"price\": this.state.price,\n                                    \"amount\": this.amount,\n                                    \"needsPrescription\": this.state.currentMedicine.needsPrescription\n                                }\n                            ])\n\n                        })\n                    }\n                })\n\n            } else {\n                let headers = new Headers();\n                headers.set('Content-Type', 'application/json');\n                headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n                fetch(\"http://localhost:8081/medicines\", {\n                    method: \"POST\",\n                    headers: headers,\n                    body: JSON.stringify([\n                        {\n                            \"name\": this.state.medicine,\n                            \"needsPrescription\": this.state.needsPrescription\n                        }\n                    ])\n\n                }).then(r => {\n                    if (r.status === 200) {\n                        toast.success(\"Medicine created!\");\n                    }\n                    else\n                        toast.error(\"Medicine already exists!\");\n                        this.setError(this.medicineInput)\n                })\n            }\n\n        }\n    }\n\n\n    validateForm() {\n        if (this.state.pathname) {\n            if (!this.state.medicines.includes(this.state.medicine.value)) {\n                this.setError(this.medicineInput, \"Invalid medicine\");\n            } else\n                {\n                    this.state.medicines.forEach((element)=>{\n                        if(element.name === this.state.medicine)\n                            this.setState({currentMedicine: element})\n                    })\n                    this.setSuccess(this.medicineInput);\n                }\n\n            if (this.state.amount.trim() === '') {\n                this.setError(this.amountInput, 'Enter amount');\n            } else {\n                this.setSuccess(this.amountInput)\n            }\n\n            if (this.state.price.trim() === '') {\n                this.setError(this.priceInput, 'Enter price');\n            } else {\n                this.setSuccess(this.priceInput)\n            }\n\n            if (this.state.slotID.trim() === '') {\n                this.setError(this.slotInput, 'Provide slot id');\n            } else {\n                this.setSuccess(this.slotInput)\n            }\n        }\n\n        else {\n            if (this.state.medicine.trim() === '') {\n                this.setError(this.medicineInput, 'Provide medicine');\n            } else {\n                this.setSuccess(this.medicineInput)\n            }\n            if (this.state.needsPrescription === null) {\n                this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n            } else\n                this.setSuccess(this.needsPrescriptionInput);\n        }\n    }\n\n\n    isFormValid() {\n        const inputContainers = this.form.querySelectorAll('.input-group');\n        let result = true;\n        inputContainers.forEach((container) => {\n            if (container.classList.contains('error')) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    setError(element, errorMessage) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('success')) {\n            parent.classList.remove('success');\n        }\n        parent.classList.add('error');\n        const paragraph = parent.querySelector('p');\n        paragraph.textContent = errorMessage;\n    }\n\n    setSuccess(element) {\n        const parent = element.parentElement;\n        console.log(element)\n        if (parent.classList.contains('error')) {\n            parent.classList.remove('error');\n        }\n        parent.classList.add('success');\n    }\n\n    render() {\n        return (\n            <div id=\"login\">\n                <form id=\"create-account-form\" className=\"content\">\n                    <div className=\"title\">\n                        <h2>Sign In</h2>\n                    </div>\n                    {\n                        this.state.pathname?\n                            <>\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"medicine\">Medicine</label>\n                                    <input list=\"medicines\" name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                                        this.getMedicine(event)\n                                    }} id=\"medicine\" autoComplete=\"off\"\n                                        placeholder=\"Choose medicine:\" />\n                                    <datalist id=\"medicines\">\n                                        {this.state.medicines.map(element =>\n                                            <option value={element.name} />\n                                        )}\n                                    </datalist>\n                                    <p>Error Message</p>\n                                </div>\n\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"amount\">Total amount</label>\n                                    <input type=\"number\" name=\"amount\" value={this.state.amountInput} onChange={event => {\n                                        this.getAmount(event)\n                                    }} id=\"amount\" autoComplete=\"off\"\n                                        placeholder=\"Amount:\" />\n                                    <p>Error Message</p>\n                                </div>\n\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"price\">Medicine Price</label>\n                                    <input type=\"number\" step=\"0.01\" name=\"price\" value={this.state.priceInput} onChange={event => {\n                                        this.getPrice(event)\n                                    }} id=\"price\" autoComplete=\"off\"\n                                        placeholder=\"Price:\" />\n                                    <p>Error Message</p>\n                                </div>\n\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"slotId\">Slot ID</label>\n                                    <input type=\"number\" name=\"slotId\" value={this.state.slotIput} onChange={event => {\n                                        this.getSlotID(event)\n                                    }} id=\"slotID\" autoComplete=\"off\"\n                                        placeholder=\"Slot ID:\" />\n                                    <p>Error Message</p>\n                                </div>\n                            </>\n\n                            : <>\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"medicine\">medicine</label>\n                                    <input name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                                        this.getMedicine(event)\n                                    }} id=\"medicine\" autoComplete=\"off\"\n                                        placeholder=\"Choose medicine:\" />\n                                    <p>Error Message</p>\n                                </div>\n\n                                <div className=\"input-group\">\n                                    <label htmlFor=\"needsPrescription\">Needs Prescription</label>\n                                    <div id=\"needsPrescription\">\n                                        <button type=\"button\" className=\"passive\" onClick={(event) => { event.target.className = 'active'; event.target.nextSibling.className = 'passive'; this.setState({ needsPrescription: true }) }}>needs prescription</button>\n                                        <button type=\"button\" className=\"passive\" onClick={(event) => { event.target.className = 'active'; event.target.previousSibling.className = 'passive'; this.setState({ needsPrescription: false }) }}>doesn't need prescription</button>\n                                    </div>\n                                    <p>Error Message</p>\n                                </div>\n                            </>\n                    }\n\n                    <button type=\"button\" className=\"btn\" onClick={() => this.createMedicine()}>Create Medicine</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default CreateMedicine"]},"metadata":{},"sourceType":"module"}