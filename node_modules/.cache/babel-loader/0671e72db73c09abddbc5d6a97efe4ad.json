{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function C() {\n  _s();\n\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  const [text, setText] = useState('Not yet scanned');\n\n  const askForCameraPermission = () => {\n    (async () => {\n      const {\n        status\n      } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }; // Request Camera Permission\n\n\n  useEffect(() => {\n    askForCameraPermission();\n  }, []); // What happens when we scan the bar code\n\n  const handleBarCodeScanned = _ref => {\n    let {\n      type,\n      data\n    } = _ref;\n    setScanned(true);\n    setText(data);\n    console.log('Type: ' + type + '\\nData: ' + data);\n  }; // Check permissions and return the screens\n\n\n  if (hasPermission === null) {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Requesting for camera permission\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (hasPermission === false) {\n    return /*#__PURE__*/_jsxDEV(View, {\n      style: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        style: {\n          margin: 10\n        },\n        children: \"No access to camera\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: 'Allow Camera',\n        onPress: () => askForCameraPermission()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  } // Return the View\n\n\n  return /*#__PURE__*/_jsxDEV(View, {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(View, {\n      style: styles.barcodebox,\n      children: /*#__PURE__*/_jsxDEV(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n        style: {\n          height: 400,\n          width: 400\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      style: styles.maintext,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), scanned && /*#__PURE__*/_jsxDEV(Button, {\n      title: 'Scan again?',\n      onPress: () => setScanned(false),\n      color: \"tomato\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(C, \"LSH2pEA0cbF9HcPKWRcjLaCwgaY=\");\n\n_c = C;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  maintext: {\n    fontSize: 16,\n    margin: 20\n  },\n  barcodebox: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 300,\n    width: 300,\n    overflow: 'hidden',\n    borderRadius: 30,\n    backgroundColor: 'tomato'\n  }\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"C\");","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js"],"names":["React","useState","useEffect","Text","View","StyleSheet","Button","BarCodeScanner","C","hasPermission","setHasPermission","scanned","setScanned","text","setText","askForCameraPermission","status","requestPermissionsAsync","handleBarCodeScanned","type","data","console","log","styles","container","margin","barcodebox","undefined","height","width","maintext","create","flex","backgroundColor","alignItems","justifyContent","fontSize","overflow","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default function C() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  const [text, setText] = useState('Not yet scanned')\n\n  const askForCameraPermission = () => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })()\n  }\n\n  // Request Camera Permission\n  useEffect(() => {\n    askForCameraPermission();\n  }, []);\n\n  // What happens when we scan the bar code\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    setText(data)\n    console.log('Type: ' + type + '\\nData: ' + data)\n  };\n\n  // Check permissions and return the screens\n  if (hasPermission === null) {\n    return (\n      <View style={styles.container}>\n        <Text>Requesting for camera permission</Text>\n      </View>)\n  }\n  if (hasPermission === false) {\n    return (\n      <View style={styles.container}>\n        <Text style={{ margin: 10 }}>No access to camera</Text>\n        <Button title={'Allow Camera'} onPress={() => askForCameraPermission()} />\n      </View>)\n  }\n\n  // Return the View\n  return (\n    <View style={styles.container}>\n      <View style={styles.barcodebox}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n          style={{ height: 400, width: 400 }} />\n      </View>\n      <Text style={styles.maintext}>{text}</Text>\n\n      {scanned && <Button title={'Scan again?'} onPress={() => setScanned(false)} color='tomato' />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  maintext: {\n    fontSize: 16,\n    margin: 20,\n  },\n  barcodebox: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 300,\n    width: 300,\n    overflow: 'hidden',\n    borderRadius: 30,\n    backgroundColor: 'tomato'\n  }\n});"]},"metadata":{},"sourceType":"module"}