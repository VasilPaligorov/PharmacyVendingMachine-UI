{"ast":null,"code":"var _jsxFileName = \"/home/vaskopaligorov/Desktop/pvm_ui/src/elements/SharedElements/prescriptions/createPrescription.js\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport '../../../css/createPrescription.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass CreatePrescription extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.getMedicine = event => {\n      this.setState({\n        medicine: event.target.value\n      });\n    };\n\n    this.getNumber = event => {\n      this.setState({\n        number: event.target.value\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      medicine: \"\",\n      number: \"\",\n      medicines: []\n    };\n    this.getEmail = this.getEmail.bind(this);\n    this.getMedicine = this.getMedicine.bind(this);\n    this.getNumber = this.getNumber.bind(this);\n  }\n\n  componentDidMount() {\n    this.medicineInput = document.querySelector('#medicine');\n    this.emailInput = document.querySelector('#patient');\n    this.numberInput = document.querySelector('#number');\n  }\n\n  componentWillMount() {\n    let names = [];\n    const url = new URL(window.location.href);\n    let headers = new Headers();\n    headers.set('Content-Type', 'application/json');\n\n    if (url.pathname === '/createOrder') {\n      fetch(sessionStorage.getItem('machineIP') + \"/medicines?prescription=no\", {\n        headers: headers\n      }).then(response => response.json()).then(data => {\n        data.forEach(element => {\n          names.push(element.name);\n        });\n        names.sort();\n        this.setState({\n          medicines: names\n        });\n      });\n    } else {\n      headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n      fetch(\"http://localhost:8081/medicines\", {\n        headers: headers\n      }).then(response => response.json()).then(data => {\n        data.forEach(element => {\n          names.push(element.name);\n        });\n        names.sort();\n        this.setState({\n          medicines: names\n        });\n      });\n    }\n  }\n\n  createPrescriptionRow() {\n    this.validateMedicine(this.medicineInput, this.numberInput);\n\n    if (this.isFormValid()) {\n      const table = document.querySelector(\"#prescription\");\n      const newRow = document.createElement(\"tr\");\n      const array = [this.medicineInput, this.numberInput, 1];\n      array.forEach(element => {\n        const newElement = document.createElement(\"td\");\n\n        if (element === 1) {\n          const newButton = document.createElement(\"button\");\n          newButton.classList.add(\"rmvBtn\");\n          newButton.innerText = \"remove\";\n\n          newButton.onclick = () => newRow.parentNode.removeChild(newRow);\n\n          newElement.appendChild(newButton);\n        } else {\n          newElement.classList.add(\"pr\");\n          newElement.innerText = element.value;\n        }\n\n        newRow.appendChild(newElement);\n      });\n      table.appendChild(newRow);\n    }\n  }\n\n  createPrescription() {\n    this.validatePatient();\n\n    if (this.isFormValid()) {\n      let prescription = [];\n      const data = document.querySelectorAll(\".pr\");\n\n      for (let i = 0; i < data.length; i += 2) {\n        prescription.push({\n          \"name\": data[i].innerText,\n          \"amount\": parseInt(data[i + 1].innerText)\n        });\n      }\n\n      if (prescription.length !== 0) {\n        let headers = new Headers();\n        headers.set('Content-Type', 'application/json');\n\n        if (sessionStorage.getItem('machineIP')) {\n          fetch(sessionStorage.getItem('machineIP') + \"/executor?fetch=false\", {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(prescription)\n          }).then(response => response.json()).then(data => {\n            if (data.status === 0) {\n              toast.info(data.message + \" Your prescription will be completed soon!\");\n              window.location.reload();\n            } else toast.error(data.message);\n          });\n        } else {\n          headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n          fetch(\"http://localhost:8081/prescriptions?patient_email=\" + this.state.email.trim(), {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(prescription)\n          }).then(r => {\n            if (r.status === 200) {\n              toast.success(\"Prescription created!\");\n              window.location.reload();\n            } else if (r.status === 404) this.setError(this.emailInput, \"Invalid patient\");else toast.error(\"Something unexpected happened! Try again!\");\n          });\n        }\n      }\n    }\n  }\n\n  isFormValid() {\n    const inputContainers = document.querySelectorAll('.wrapper');\n    let result = true;\n    inputContainers.forEach(container => {\n      if (container.classList.contains('error')) {\n        result = false;\n      }\n    });\n    return result;\n  }\n\n  validateMedicine(medicine, number) {\n    if (!this.state.medicines.includes(medicine.value)) {\n      this.setError(medicine, \"Invalid medicine\");\n    } else this.setSuccess(medicine);\n\n    if (number.value.trim() === '') {\n      this.setError(number, \"Enter a number\");\n    } else this.setSuccess(number);\n  }\n\n  setError(element, errorMessage) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('success')) {\n      parent.classList.remove('success');\n    }\n\n    parent.classList.add('error');\n    const paragraph = parent.querySelector('p');\n    paragraph.textContent = errorMessage;\n  }\n\n  setSuccess(element) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('error')) {\n      parent.classList.remove('error');\n    }\n\n    parent.classList.add('success');\n  }\n\n  validatePatient() {\n    if (!sessionStorage.getItem('machineIP')) {\n      if (this.state.email.trim() === '') {\n        this.setError(this.emailInput, \"Enter patient\");\n      } else this.setSuccess(this.emailInput);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      id: \"createPrescription\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create prescription:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"topBar\",\n          children: [!sessionStorage.getItem('machineIP') ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"patient\",\n              children: \"patient email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"patient\",\n              alue: this.state.email,\n              onChange: event => {\n                this.getEmail(event);\n              },\n              id: \"patient\",\n              autoComplete: \"off\",\n              placeholder: \"Enter patient email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"medicine\",\n              children: \"medicine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              list: \"medicines\",\n              name: \"medicine\",\n              value: this.state.medicineInput,\n              onChange: event => {\n                this.getMedicine(event);\n              },\n              id: \"medicine\",\n              autoComplete: \"off\",\n              placeholder: \"Choose medicine:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n              id: \"medicines\",\n              children: this.state.medicines.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"number\",\n              children: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"number\",\n              value: this.state.number,\n              onChange: event => {\n                this.getNumber(event);\n              },\n              id: \"number\",\n              placeholder: \"Number of medicines:\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: () => this.createPrescriptionRow(),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tableContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"prescription\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Medicine\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Number\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn last\",\n          type: \"button\",\n          onClick: () => this.createPrescription(),\n          children: \"Create Prescription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CreatePrescription;","map":{"version":3,"sources":["/home/vaskopaligorov/Desktop/pvm_ui/src/elements/SharedElements/prescriptions/createPrescription.js"],"names":["React","toast","CreatePrescription","Component","constructor","props","getEmail","event","setState","email","target","value","getMedicine","medicine","getNumber","number","state","medicines","bind","componentDidMount","medicineInput","document","querySelector","emailInput","numberInput","componentWillMount","names","url","URL","window","location","href","headers","Headers","set","pathname","fetch","sessionStorage","getItem","then","response","json","data","forEach","element","push","name","sort","btoa","localStorage","createPrescriptionRow","validateMedicine","isFormValid","table","newRow","createElement","array","newElement","newButton","classList","add","innerText","onclick","parentNode","removeChild","appendChild","createPrescription","validatePatient","prescription","querySelectorAll","i","length","parseInt","method","body","JSON","stringify","status","info","message","reload","error","trim","r","success","setError","inputContainers","result","container","contains","includes","setSuccess","errorMessage","parent","parentElement","remove","paragraph","textContent","render","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { toast } from \"react-toastify\";\nimport '../../../css/createPrescription.css'\n\nclass CreatePrescription extends React.Component {\n    medicineInput;\n    emailInput;\n    numberInput;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\", medicine: \"\", number: \"\", medicines: [],\n        };\n        this.getEmail = this.getEmail.bind(this);\n        this.getMedicine = this.getMedicine.bind(this);\n        this.getNumber = this.getNumber.bind(this);\n    }\n\n    componentDidMount() {\n        this.medicineInput = document.querySelector('#medicine');\n        this.emailInput = document.querySelector('#patient');\n        this.numberInput = document.querySelector('#number');\n    }\n\n\n    getEmail = (event) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    getMedicine = (event) => {\n        this.setState({\n            medicine: event.target.value\n        })\n    };\n    getNumber = (event) => {\n        this.setState({\n            number: event.target.value\n        })\n    };\n\n\n    componentWillMount() {\n        let names = [];\n        const url = new URL(window.location.href);\n        let headers = new Headers();\n        headers.set('Content-Type', 'application/json');\n        if (url.pathname === '/createOrder') {\n            fetch(sessionStorage.getItem('machineIP') + \"/medicines?prescription=no\", {\n                headers: headers,\n            })\n                .then(response => response.json())\n                .then(data => {\n                    data.forEach(element => {\n                        names.push(element.name)\n                    })\n                    names.sort();\n                    this.setState({ medicines: names })\n                })\n        }\n        else {\n            headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n            fetch(\"http://localhost:8081/medicines\", {\n                headers: headers,\n            })\n                .then(response => response.json())\n                .then(data => {\n                    data.forEach(element => {\n                        names.push(element.name)\n                    })\n                    names.sort();\n                    this.setState({ medicines: names })\n                })\n        }\n\n    }\n\n    createPrescriptionRow() {\n        this.validateMedicine(this.medicineInput, this.numberInput);\n        if (this.isFormValid()) {\n            const table = document.querySelector(\"#prescription\");\n            const newRow = document.createElement(\"tr\");\n            const array = [this.medicineInput, this.numberInput, 1];\n            array.forEach(element => {\n                const newElement = document.createElement(\"td\");\n                if (element === 1) {\n                    const newButton = document.createElement(\"button\");\n                    newButton.classList.add(\"rmvBtn\");\n                    newButton.innerText = \"remove\";\n                    newButton.onclick = () => newRow.parentNode.removeChild(newRow);\n                    newElement.appendChild(newButton);\n                } else {\n                    newElement.classList.add(\"pr\")\n                    newElement.innerText = element.value;\n                }\n                newRow.appendChild(newElement);\n            })\n            table.appendChild(newRow);\n        }\n    }\n\n    createPrescription() {\n        this.validatePatient();\n        if (this.isFormValid()) {\n            let prescription = [];\n            const data = document.querySelectorAll(\".pr\");\n            for (let i = 0; i < data.length; i += 2) {\n                prescription.push({\n                    \"name\": data[i].innerText,\n                    \"amount\": parseInt(data[i + 1].innerText)\n                });\n            }\n            if (prescription.length !== 0) {\n                let headers = new Headers();\n                headers.set('Content-Type', 'application/json');\n                if (sessionStorage.getItem('machineIP')) {\n                    fetch(sessionStorage.getItem('machineIP') + \"/executor?fetch=false\", {\n                        method: \"POST\",\n                        headers: headers,\n                        body: JSON.stringify(prescription)\n                    })\n                        .then(response => response.json())\n                        .then(data => {\n                            if (data.status === 0) {\n                                toast.info(data.message + \" Your prescription will be completed soon!\");\n                                window.location.reload()\n                            } else\n                                toast.error(data.message);\n\n                        })\n                }\n                else {\n                    headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n                    fetch(\"http://localhost:8081/prescriptions?patient_email=\" + this.state.email.trim(), {\n                        method: \"POST\",\n                        headers: headers,\n                        body: JSON.stringify(prescription)\n\n                    }).then(r => {\n                        if (r.status === 200) {\n                            toast.success(\"Prescription created!\");\n                            window.location.reload();\n                        } else if (r.status === 404)\n                            this.setError(this.emailInput, \"Invalid patient\");\n                        else\n                            toast.error(\"Something unexpected happened! Try again!\");\n                    })\n                }\n            }\n        }\n    }\n\n    isFormValid() {\n        const inputContainers = document.querySelectorAll('.wrapper');\n        let result = true;\n        inputContainers.forEach((container) => {\n            if (container.classList.contains('error')) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    validateMedicine(medicine, number) {\n        if (!this.state.medicines.includes(medicine.value)) {\n            this.setError(medicine, \"Invalid medicine\");\n        } else\n            this.setSuccess(medicine);\n\n        if (number.value.trim() === '') {\n            this.setError(number, \"Enter a number\");\n        } else\n            this.setSuccess(number);\n    }\n\n    setError(element, errorMessage) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('success')) {\n            parent.classList.remove('success');\n        }\n        parent.classList.add('error');\n        const paragraph = parent.querySelector('p');\n        paragraph.textContent = errorMessage;\n    }\n\n    setSuccess(element) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('error')) {\n            parent.classList.remove('error');\n        }\n        parent.classList.add('success');\n    }\n\n    validatePatient() {\n        if (!sessionStorage.getItem('machineIP')) {\n            if (this.state.email.trim() === '') {\n                this.setError(this.emailInput, \"Enter patient\");\n            } else\n                this.setSuccess(this.emailInput);\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"content\" id=\"createPrescription\">\n                <div className=\"container\">\n                    <h1>Create prescription:</h1>\n                    <div className=\"topBar\">\n\n                        {!sessionStorage.getItem('machineIP') ?\n                            <div className=\"wrapper\">\n                                <label htmlFor=\"patient\">patient email</label>\n                                <input name=\"patient\" alue={this.state.email} onChange={event => {\n                                    this.getEmail(event)\n                                }} id=\"patient\" autoComplete=\"off\" placeholder=\"Enter patient email:\" />\n                                <p>Error Message</p>\n                            </div> :\n                            <></>\n                        }\n\n                        <div className=\"wrapper\">\n                            <label htmlFor=\"medicine\">medicine</label>\n                            <input list=\"medicines\" name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                                this.getMedicine(event)\n                            }} id=\"medicine\" autoComplete=\"off\"\n                                placeholder=\"Choose medicine:\" />\n                            <datalist id=\"medicines\">\n                                {this.state.medicines.map(element =>\n                                    <option value={element} />\n                                )}\n                            </datalist>\n                            <p>Error Message</p>\n                        </div>\n\n                        <div className=\"wrapper\">\n                            <label htmlFor=\"number\">number</label>\n                            <input type=\"number\" name=\"number\" value={this.state.number} onChange={event => {\n                                this.getNumber(event)\n                            }} id=\"number\" placeholder=\"Number of medicines:\"\n                                autoComplete=\"off\" />\n                            <p>Error Message</p>\n                        </div>\n\n                        <button className=\"btn\" onClick={() => this.createPrescriptionRow()}>Add</button>\n                    </div>\n                    <div className=\"line\" />\n                    <div className=\"tableContainer\">\n                        <table id=\"prescription\">\n                            <thead>\n                                <tr>\n                                    <th>Medicine</th>\n                                    <th>Number</th>\n                                    <th>Remove</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                            </tbody>\n                        </table>\n                    </div>\n                    <button className=\"btn last\" type=\"button\" onClick={() => this.createPrescription()}>Create Prescription\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreatePrescription;"]},"metadata":{},"sourceType":"module"}