{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/machineConnection/connectToMachine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ContinuousQrScanner } from 'react-webcam-qr-scanner.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ConnectToMachine() {\n  _s();\n\n  const [qrCode, setQrCode] = useState('');\n\n  function QrDetected(QrCode) {\n    try {\n      const machineIP = atob(QrCode);\n    } catch (error) {}\n\n    let message = '';\n    let headers = new Headers();\n    headers.set('Content-Type', 'application/json');\n\n    if (QrCode !== '') {\n      fetch(machineIP + \"/configuration/status\", {\n        headers: headers\n      }).then(response => response.json()).then(data => {\n        if (data === true) {\n          sessionStorage.setItem('machineIP', machineIP);\n          window.location.href = '/showPrescriptions';\n        } else message = \"Invalid QR code\";\n      }).catch(error => {\n        message = \"Invalid QR code\";\n      });\n      message = \"Invalid QR code\";\n    }\n\n    return message;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Scan Machine QR Code: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: QrDetected(qrCode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContinuousQrScanner, {\n      onQrCode: setQrCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConnectToMachine, \"mllj/JYPdze9TmrenfQyB5E/uek=\");\n\n_c = ConnectToMachine;\nexport default ConnectToMachine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectToMachine\");","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/machineConnection/connectToMachine.js"],"names":["React","useState","ContinuousQrScanner","ConnectToMachine","qrCode","setQrCode","QrDetected","QrCode","machineIP","atob","error","message","headers","Headers","set","fetch","then","response","json","data","sessionStorage","setItem","window","location","href","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,mBAAT,QAAoC,4BAApC;;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;;AAEA,WAASK,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,QAAI;AACF,YAAMC,SAAS,GAAGC,IAAI,CAACF,MAAD,CAAtB;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc,CAEf;;AACD,QAAIC,OAAO,GAAG,EAAd;AAEA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;;AACA,QAAIP,MAAM,KAAK,EAAf,EAAmB;AACjBQ,MAAAA,KAAK,CAACP,SAAS,GAAG,uBAAb,EAAsC;AACzCI,QAAAA,OAAO,EAAEA;AADgC,OAAtC,CAAL,CAGGI,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIGF,IAJH,CAIQG,IAAI,IAAI;AAEZ,YAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBC,UAAAA,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCb,SAApC;AACAc,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwB,oBAAxB;AACD,SAHD,MAKEb,OAAO,GAAG,iBAAV;AACH,OAZH,EAaGc,KAbH,CAcIf,KAAK,IAAI;AACPC,QAAAA,OAAO,GAAG,iBAAV;AACD,OAhBL;AAkBAA,MAAAA,OAAO,GAAG,iBAAV;AACD;;AACD,WAAQA,OAAR;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAA,wDACwB;AAAA,kBAAOL,UAAU,CAACF,MAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,cADxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA7CQF,gB;;KAAAA,gB;AA+CT,eAAeA,gBAAf","sourcesContent":["import React, { useState } from 'react'\nimport { ContinuousQrScanner } from 'react-webcam-qr-scanner.ts'\n\nfunction ConnectToMachine() {\n  const [qrCode, setQrCode] = useState('')\n\n  function QrDetected(QrCode) {\n    try {\n      const machineIP = atob(QrCode);\n    } catch (error) {\n\n    }\n    let message = ''\n\n    let headers = new Headers();\n    headers.set('Content-Type', 'application/json');\n    if (QrCode !== '') {\n      fetch(machineIP + \"/configuration/status\", {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(data => {\n\n          if (data === true) {\n            sessionStorage.setItem('machineIP', machineIP);\n            window.location.href = ('/showPrescriptions');\n          }\n          else\n            message = \"Invalid QR code\"\n        })\n        .catch(\n          error => {\n            message = \"Invalid QR code\"\n          }\n        );\n      message = \"Invalid QR code\"\n    }\n    return (message);\n  }\n\n  return (\n    <div className='content'>\n      <h1>\n        Scan Machine QR Code: <code>{QrDetected(qrCode)}</code>\n      </h1>\n      <ContinuousQrScanner onQrCode={setQrCode} />\n    </div>\n  )\n}\n\nexport default ConnectToMachine"]},"metadata":{},"sourceType":"module"}