{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js\";\nimport React from \"react\";\nimport { toast } from 'react-toastify';\nimport \"../../../../css/createMedicine.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateMedicine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMedicine = event => {\n      this.setState({\n        medicine: event.target.value\n      });\n    };\n\n    this.getNeedsPrescription = event => {\n      this.setState({\n        needsPrescription: event.target.value\n      });\n    };\n\n    this.state = {\n      medicine: \"\",\n      needsPrescription: null\n    };\n    this.getMedicine = this.getMedicine.bind(this);\n    this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n  }\n\n  componentDidMount() {\n    this.form = document.querySelector('#create-account-form');\n    this.medicineInput = document.querySelector('#medicine');\n    this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n  }\n\n  createMedicine() {\n    this.validateForm();\n\n    if (this.isFormValid() === true) {\n      let headers = new Headers();\n      headers.set('Content-Type', 'application/json');\n      headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n      fetch(\"http://localhost:8081/medicines\", {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify([{\n          \"name\": this.state.medicine,\n          \"needsPrescription\": this.state.needsPrescription\n        }])\n      }).then(r => {\n        if (r.status === 200) {\n          toast.success(\"Prescription created!\");\n          window.location.reload();\n        } else toast.error(data.message);\n      });\n    }\n  }\n\n  validateForm() {\n    if (this.state.medicine.trim() === '') {\n      this.setError(this.medicineInput, 'Provide email address');\n    } else {\n      this.setSuccess(this.medicineInput);\n    }\n\n    if (this.state.needsPrescription === null) {\n      this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n    } else this.setSuccess(this.needsPrescriptionInput);\n  }\n\n  isFormValid() {\n    const inputContainers = this.form.querySelectorAll('.input-group');\n    let result = true;\n    inputContainers.forEach(container => {\n      if (container.classList.contains('error')) {\n        result = false;\n      }\n    });\n    return result;\n  }\n\n  setError(element, errorMessage) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('success')) {\n      parent.classList.remove('success');\n    }\n\n    parent.classList.add('error');\n    const paragraph = parent.querySelector('p');\n    paragraph.textContent = errorMessage;\n  }\n\n  setSuccess(element) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('error')) {\n      parent.classList.remove('error');\n    }\n\n    parent.classList.add('success');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"login\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-account-form\",\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"medicine\",\n            children: \"medicine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"medicine\",\n            value: this.state.medicineInput,\n            onChange: event => {\n              this.getMedicine(event);\n            },\n            id: \"medicine\",\n            autoComplete: \"off\",\n            placeholder: \"Choose medicine:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"needsPrescription\",\n            children: \"Needs Prescription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"needsPrescription\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"passive\",\n              onClick: event => {\n                event.target.className = 'active';\n                event.target.nextSibling.className = 'passive';\n                this.setState({\n                  needsPrescription: true\n                });\n              },\n              children: \"needs prescription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"passive\",\n              onClick: event => {\n                event.target.className = 'active';\n                event.target.previousSibling.className = 'passive';\n                this.setState({\n                  needsPrescription: false\n                });\n              },\n              children: \"doesn't need prescription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: () => this.createMedicine(),\n          children: \"Create Medicine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CreateMedicine;","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js"],"names":["React","toast","CreateMedicine","Component","constructor","props","getMedicine","event","setState","medicine","target","value","getNeedsPrescription","needsPrescription","state","bind","componentDidMount","form","document","querySelector","medicineInput","needsPrescriptionInput","createMedicine","validateForm","isFormValid","headers","Headers","set","btoa","localStorage","getItem","fetch","method","body","JSON","stringify","then","r","status","success","window","location","reload","error","data","message","trim","setError","setSuccess","inputContainers","querySelectorAll","result","forEach","container","classList","contains","element","errorMessage","parent","parentElement","remove","add","paragraph","textContent","render","className","nextSibling","previousSibling"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { toast } from 'react-toastify';\nimport \"../../../../css/createMedicine.css\"\n\nclass CreateMedicine extends React.Component {\n    form;\n    medicineInput;\n    needsPrescriptionInput;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            medicine: \"\", needsPrescription: null\n        };\n        this.getMedicine = this.getMedicine.bind(this);\n        this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n    }\n\n    componentDidMount() {\n        this.form = document.querySelector('#create-account-form');\n        this.medicineInput = document.querySelector('#medicine');\n        this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n\n    }\n\n\n    getMedicine = (event) => {\n        this.setState({\n            medicine: event.target.value\n        })\n    };\n\n    getNeedsPrescription = (event) => {\n        this.setState({\n            needsPrescription: event.target.value\n        })\n    };\n\n    createMedicine() {\n        this.validateForm();\n        if (this.isFormValid() === true) {\n            let headers = new Headers();\n            headers.set('Content-Type', 'application/json');\n            headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n            fetch(\"http://localhost:8081/medicines\", {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify([\n                    {\n                        \"name\": this.state.medicine,\n                        \"needsPrescription\": this.state.needsPrescription\n                    }\n                ])\n\n            }).then(r => {\n                if (r.status === 200) {\n                    toast.success(\"Prescription created!\");\n                    window.location.reload();\n                } \n                else\n                    toast.error(data.message);\n            })\n        }\n    }\n\n\n    validateForm() {\n        if (this.state.medicine.trim() === '') {\n            this.setError(this.medicineInput, 'Provide email address');\n        } else {\n            this.setSuccess(this.medicineInput)\n        }\n        if (this.state.needsPrescription === null) {\n            this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n        } else\n            this.setSuccess(this.needsPrescriptionInput);\n    }\n\n\n    isFormValid() {\n        const inputContainers = this.form.querySelectorAll('.input-group');\n        let result = true;\n        inputContainers.forEach((container) => {\n            if (container.classList.contains('error')) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    setError(element, errorMessage) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('success')) {\n            parent.classList.remove('success');\n        }\n        parent.classList.add('error');\n        const paragraph = parent.querySelector('p');\n        paragraph.textContent = errorMessage;\n    }\n\n    setSuccess(element) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('error')) {\n            parent.classList.remove('error');\n        }\n        parent.classList.add('success');\n    }\n\n    render() {\n        return (\n            <div id=\"login\">\n                <form id=\"create-account-form\" className=\"content\">\n                    <div className=\"title\">\n                        <h2>Sign In</h2>\n                    </div>\n\n                    <div className=\"input-group\">\n                        <label htmlFor=\"medicine\">medicine</label>\n                        <input name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                            this.getMedicine(event)\n                        }} id=\"medicine\" autoComplete=\"off\"\n                            placeholder=\"Choose medicine:\" />\n                        <p>Error Message</p>\n                    </div>\n\n                    <div className=\"input-group\">\n                        <label htmlFor=\"needsPrescription\">Needs Prescription</label>\n                        <div id=\"needsPrescription\">\n                            <button type=\"button\" className=\"passive\" onClick={(event) => { event.target.className='active'; event.target.nextSibling.className =  'passive'; this.setState({ needsPrescription: true }) }}>needs prescription</button>\n                            <button type=\"button\" className=\"passive\" onClick={(event) => { event.target.className='active'; event.target.previousSibling.className = 'passive'; this.setState({ needsPrescription: false }) }}>doesn't need prescription</button>\n                        </div>\n                        <p>Error Message</p>\n                    </div>\n\n                    <button type=\"button\" className=\"btn\" onClick={() => this.createMedicine()}>Create Medicine</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default CreateMedicine"]},"metadata":{},"sourceType":"module"}