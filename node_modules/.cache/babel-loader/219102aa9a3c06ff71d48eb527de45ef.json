{"ast":null,"code":"class e {\n  constructor(a, b, c, d, f) {\n    this._legacyCanvasSize = e.DEFAULT_CANVAS_SIZE;\n    this._preferredCamera = \"environment\";\n    this._maxScansPerSecond = 25;\n    this._lastScanTimestamp = -1;\n    this._destroyed = this._flashOn = this._paused = this._active = !1;\n    this.$video = a;\n    this.$canvas = document.createElement(\"canvas\");\n    c && \"object\" === typeof c ? this._onDecode = b : (c || d || f ? console.warn(\"You're using a deprecated version of the QrScanner constructor which will be removed in the future\") : console.warn(\"Note that the type of the scan result passed to onDecode will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\"), this._legacyOnDecode = b);\n    b = \"object\" === typeof c ? c : {};\n    this._onDecodeError = b.onDecodeError || (\"function\" === typeof c ? c : this._onDecodeError);\n    this._calculateScanRegion = b.calculateScanRegion || (\"function\" === typeof d ? d : this._calculateScanRegion);\n    this._preferredCamera = b.preferredCamera || f || this._preferredCamera;\n    this._legacyCanvasSize = \"number\" === typeof c ? c : \"number\" === typeof d ? d : this._legacyCanvasSize;\n    this._maxScansPerSecond = b.maxScansPerSecond || this._maxScansPerSecond;\n    this._onPlay = this._onPlay.bind(this);\n    this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n    this._updateOverlay = this._updateOverlay.bind(this);\n    a.disablePictureInPicture = !0;\n    a.playsInline = !0;\n    a.muted = !0;\n    let h = !1;\n    a.hidden && (a.hidden = !1, h = !0);\n    document.body.contains(a) || (document.body.appendChild(a), h = !0);\n    c = a.parentElement;\n\n    if (b.highlightScanRegion || b.highlightCodeOutline) {\n      d = !!b.overlay;\n      this.$overlay = b.overlay || document.createElement(\"div\");\n      f = this.$overlay.style;\n      f.position = \"absolute\";\n      f.display = \"none\";\n      f.pointerEvents = \"none\";\n      this.$overlay.classList.add(\"scan-region-highlight\");\n\n      if (!d && b.highlightScanRegion) {\n        this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\"><path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n\n        try {\n          this.$overlay.firstElementChild.animate({\n            transform: [\"scale(.98)\", \"scale(1.01)\"]\n          }, {\n            duration: 400,\n            iterations: Infinity,\n            direction: \"alternate\",\n            easing: \"ease-in-out\"\n          });\n        } catch (m) {}\n\n        c.insertBefore(this.$overlay, this.$video.nextSibling);\n      }\n\n      b.highlightCodeOutline && (this.$overlay.insertAdjacentHTML(\"beforeend\", '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>'), this.$codeOutlineHighlight = this.$overlay.lastElementChild);\n    }\n\n    this._scanRegion = this._calculateScanRegion(a);\n    requestAnimationFrame(() => {\n      let m = window.getComputedStyle(a);\n      \"none\" === m.display && (a.style.setProperty(\"display\", \"block\", \"important\"), h = !0);\n      \"visible\" !== m.visibility && (a.style.setProperty(\"visibility\", \"visible\", \"important\"), h = !0);\n      h && (console.warn(\"QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.\"), a.style.opacity = \"0\", a.style.width = \"0\", a.style.height = \"0\", this.$overlay && this.$overlay.parentElement && this.$overlay.parentElement.removeChild(this.$overlay), delete this.$overlay, delete this.$codeOutlineHighlight);\n      this.$overlay && this._updateOverlay();\n    });\n    a.addEventListener(\"play\", this._onPlay);\n    a.addEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    document.addEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.addEventListener(\"resize\", this._updateOverlay);\n    this._qrEnginePromise = e.createQrEngine();\n  }\n\n  static set WORKER_PATH(a) {\n    console.warn(\"Setting QrScanner.WORKER_PATH is not required and not supported anymore. Have a look at the README for new setup instructions.\");\n  }\n\n  static async hasCamera() {\n    try {\n      return !!(await e.listCameras(!1)).length;\n    } catch (a) {\n      return !1;\n    }\n  }\n\n  static async listCameras() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n    if (!navigator.mediaDevices) return [];\n\n    let b = async () => (await navigator.mediaDevices.enumerateDevices()).filter(d => \"videoinput\" === d.kind),\n        c;\n\n    try {\n      a && (await b()).every(d => !d.label) && (c = await navigator.mediaDevices.getUserMedia({\n        audio: !1,\n        video: !0\n      }));\n    } catch (d) {}\n\n    try {\n      return (await b()).map((d, f) => ({\n        id: d.deviceId,\n        label: d.label || (0 === f ? \"Default Camera\" : `Camera ${f + 1}`)\n      }));\n    } finally {\n      c && (console.warn(\"Call listCameras after successfully starting a QR scanner to avoid creating a temporary video stream\"), e._stopVideoStream(c));\n    }\n  }\n\n  async hasFlash() {\n    let a;\n\n    try {\n      if (this.$video.srcObject) {\n        if (!(this.$video.srcObject instanceof MediaStream)) return !1;\n        a = this.$video.srcObject;\n      } else a = (await this._getCameraStream()).stream;\n\n      return \"torch\" in a.getVideoTracks()[0].getSettings();\n    } catch (b) {\n      return !1;\n    } finally {\n      a && a !== this.$video.srcObject && (console.warn(\"Call hasFlash after successfully starting the scanner to avoid creating a temporary video stream\"), e._stopVideoStream(a));\n    }\n  }\n\n  isFlashOn() {\n    return this._flashOn;\n  }\n\n  async toggleFlash() {\n    this._flashOn ? await this.turnFlashOff() : await this.turnFlashOn();\n  }\n\n  async turnFlashOn() {\n    if (!this._flashOn && !this._destroyed && (this._flashOn = !0, this._active && !this._paused)) try {\n      if (!(await this.hasFlash())) throw \"No flash available\";\n      await this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n        advanced: [{\n          torch: !0\n        }]\n      });\n    } catch (a) {\n      throw this._flashOn = !1, a;\n    }\n  }\n\n  async turnFlashOff() {\n    this._flashOn && (this._flashOn = !1, await this._restartVideoStream());\n  }\n\n  destroy() {\n    this.$video.removeEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    this.$video.removeEventListener(\"play\", this._onPlay);\n    document.removeEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.removeEventListener(\"resize\", this._updateOverlay);\n    this._destroyed = !0;\n    this._flashOn = !1;\n    this.stop();\n\n    e._postWorkerMessage(this._qrEnginePromise, \"close\");\n  }\n\n  async start() {\n    if (this._destroyed) throw Error(\"The QR scanner can not be started as it had been destroyed.\");\n    if (!this._active || this._paused) if (\"https:\" !== window.location.protocol && console.warn(\"The camera stream is only accessible if the page is transferred via https.\"), this._active = !0, !document.hidden) if (this._paused = !1, this.$video.srcObject) await this.$video.play();else try {\n      let {\n        stream: a,\n        facingMode: b\n      } = await this._getCameraStream();\n      !this._active || this._paused ? e._stopVideoStream(a) : (this._setVideoMirror(b), this.$video.srcObject = a, await this.$video.play(), this._flashOn && (this._flashOn = !1, this.turnFlashOn().catch(() => {})));\n    } catch (a) {\n      if (!this._paused) throw this._active = !1, a;\n    }\n  }\n\n  stop() {\n    this.pause();\n    this._active = !1;\n  }\n\n  async pause() {\n    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n    this._paused = !0;\n    if (!this._active) return !0;\n    this.$video.pause();\n    this.$overlay && (this.$overlay.style.display = \"none\");\n\n    let b = () => {\n      this.$video.srcObject instanceof MediaStream && (e._stopVideoStream(this.$video.srcObject), this.$video.srcObject = null);\n    };\n\n    if (a) return b(), !0;\n    await new Promise(c => setTimeout(c, 300));\n    if (!this._paused) return !1;\n    b();\n    return !0;\n  }\n\n  async setCamera(a) {\n    a !== this._preferredCamera && (this._preferredCamera = a, await this._restartVideoStream());\n  }\n\n  static async scanImage(a, b, c, d) {\n    let f = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;\n    let h = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : !1;\n    let m,\n        n = !1;\n    b && (\"scanRegion\" in b || \"qrEngine\" in b || \"canvas\" in b || \"disallowCanvasResizing\" in b || \"alsoTryWithoutScanRegion\" in b || \"returnDetailedScanResult\" in b) ? (m = b.scanRegion, c = b.qrEngine, d = b.canvas, f = b.disallowCanvasResizing || !1, h = b.alsoTryWithoutScanRegion || !1, n = !0) : b || c || d || f || h ? console.warn(\"You're using a deprecated api for scanImage which will be removed in the future.\") : console.warn(\"Note that the return type of scanImage will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\");\n    b = !!c;\n\n    try {\n      let p, k;\n      [c, p] = await Promise.all([c || e.createQrEngine(), e._loadImage(a)]);\n      [d, k] = e._drawToCanvas(p, m, d, f);\n      let q;\n\n      if (c instanceof Worker) {\n        let g = c;\n        b || e._postWorkerMessageSync(g, \"inversionMode\", \"both\");\n        q = await new Promise((l, v) => {\n          let w,\n              u,\n              r,\n              y = -1;\n\n          u = t => {\n            t.data.id === y && (g.removeEventListener(\"message\", u), g.removeEventListener(\"error\", r), clearTimeout(w), null !== t.data.data ? l({\n              data: t.data.data,\n              cornerPoints: e._convertPoints(t.data.cornerPoints, m)\n            }) : v(e.NO_QR_CODE_FOUND));\n          };\n\n          r = t => {\n            g.removeEventListener(\"message\", u);\n            g.removeEventListener(\"error\", r);\n            clearTimeout(w);\n            v(\"Scanner error: \" + (t ? t.message || t : \"Unknown Error\"));\n          };\n\n          g.addEventListener(\"message\", u);\n          g.addEventListener(\"error\", r);\n          w = setTimeout(() => r(\"timeout\"), 1E4);\n          let x = k.getImageData(0, 0, d.width, d.height);\n          y = e._postWorkerMessageSync(g, \"decode\", x, [x.data.buffer]);\n        });\n      } else q = await Promise.race([new Promise((g, l) => window.setTimeout(() => l(\"Scanner error: timeout\"), 1E4)), (async () => {\n        try {\n          var [g] = await c.detect(d);\n          if (!g) throw e.NO_QR_CODE_FOUND;\n          return {\n            data: g.rawValue,\n            cornerPoints: e._convertPoints(g.cornerPoints, m)\n          };\n        } catch (l) {\n          g = l.message || l;\n          if (/not implemented|service unavailable/.test(g)) return e._disableBarcodeDetector = !0, e.scanImage(a, {\n            scanRegion: m,\n            canvas: d,\n            disallowCanvasResizing: f,\n            alsoTryWithoutScanRegion: h\n          });\n          throw `Scanner error: ${g}`;\n        }\n      })()]);\n\n      return n ? q : q.data;\n    } catch (p) {\n      if (!m || !h) throw p;\n      let k = await e.scanImage(a, {\n        qrEngine: c,\n        canvas: d,\n        disallowCanvasResizing: f\n      });\n      return n ? k : k.data;\n    } finally {\n      b || e._postWorkerMessage(c, \"close\");\n    }\n  }\n\n  setGrayscaleWeights(a, b, c) {\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;\n\n    e._postWorkerMessage(this._qrEnginePromise, \"grayscaleWeights\", {\n      red: a,\n      green: b,\n      blue: c,\n      useIntegerApproximation: d\n    });\n  }\n\n  setInversionMode(a) {\n    e._postWorkerMessage(this._qrEnginePromise, \"inversionMode\", a);\n  }\n\n  static async createQrEngine(a) {\n    a && console.warn(\"Specifying a worker path is not required and not supported anymore.\");\n    return !e._disableBarcodeDetector && \"BarcodeDetector\" in window && BarcodeDetector.getSupportedFormats && (await BarcodeDetector.getSupportedFormats()).includes(\"qr_code\") ? new BarcodeDetector({\n      formats: [\"qr_code\"]\n    }) : import(\"./qr-scanner-worker.min.js\").then(b => b.createWorker());\n  }\n\n  _onPlay() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n\n    this._updateOverlay();\n\n    this.$overlay && (this.$overlay.style.display = \"\");\n\n    this._scanFrame();\n  }\n\n  _onLoadedMetaData() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n\n    this._updateOverlay();\n  }\n\n  _onVisibilityChange() {\n    document.hidden ? this.pause() : this._active && this.start();\n  }\n\n  _calculateScanRegion(a) {\n    let b = Math.round(2 / 3 * Math.min(a.videoWidth, a.videoHeight));\n    return {\n      x: Math.round((a.videoWidth - b) / 2),\n      y: Math.round((a.videoHeight - b) / 2),\n      width: b,\n      height: b,\n      downScaledWidth: this._legacyCanvasSize,\n      downScaledHeight: this._legacyCanvasSize\n    };\n  }\n\n  _updateOverlay() {\n    requestAnimationFrame(() => {\n      if (this.$overlay) {\n        var a = this.$video,\n            b = a.videoWidth,\n            c = a.videoHeight,\n            d = a.offsetWidth,\n            f = a.offsetHeight,\n            h = a.offsetLeft,\n            m = a.offsetTop,\n            n = window.getComputedStyle(a),\n            p = n.objectFit,\n            k = b / c,\n            q = d / f;\n\n        switch (p) {\n          case \"none\":\n            var g = b;\n            var l = c;\n            break;\n\n          case \"fill\":\n            g = d;\n            l = f;\n            break;\n\n          default:\n            (\"cover\" === p ? k > q : k < q) ? (l = f, g = l * k) : (g = d, l = g / k), \"scale-down\" === p && (g = Math.min(g, b), l = Math.min(l, c));\n        }\n\n        var [v, w] = n.objectPosition.split(\" \").map((r, y) => {\n          const x = parseFloat(r);\n          return r.endsWith(\"%\") ? (y ? f - l : d - g) * x / 100 : x;\n        });\n        n = this._scanRegion.width || b;\n        q = this._scanRegion.height || c;\n        p = this._scanRegion.x || 0;\n        var u = this._scanRegion.y || 0;\n        k = this.$overlay.style;\n        k.width = `${n / b * g}px`;\n        k.height = `${q / c * l}px`;\n        k.top = `${m + w + u / c * l}px`;\n        c = /scaleX\\(-1\\)/.test(a.style.transform);\n        k.left = `${h + (c ? d - v - g : v) + (c ? b - p - n : p) / b * g}px`;\n        k.transform = a.style.transform;\n      }\n    });\n  }\n\n  static _convertPoints(a, b) {\n    if (!b) return a;\n    let c = b.x || 0,\n        d = b.y || 0,\n        f = b.width && b.downScaledWidth ? b.width / b.downScaledWidth : 1;\n    b = b.height && b.downScaledHeight ? b.height / b.downScaledHeight : 1;\n\n    for (let h of a) h.x = h.x * f + c, h.y = h.y * b + d;\n\n    return a;\n  }\n\n  _scanFrame() {\n    !this._active || this.$video.paused || this.$video.ended || (\"requestVideoFrameCallback\" in this.$video ? this.$video.requestVideoFrameCallback.bind(this.$video) : requestAnimationFrame)(async () => {\n      if (!(1 >= this.$video.readyState)) {\n        var a = Date.now() - this._lastScanTimestamp,\n            b = 1E3 / this._maxScansPerSecond;\n\n        a < b && (await new Promise(d => setTimeout(d, b - a)));\n        this._lastScanTimestamp = Date.now();\n\n        try {\n          var c = await e.scanImage(this.$video, {\n            scanRegion: this._scanRegion,\n            qrEngine: this._qrEnginePromise,\n            canvas: this.$canvas\n          });\n        } catch (d) {\n          if (!this._active) return;\n\n          this._onDecodeError(d);\n        }\n\n        !e._disableBarcodeDetector || (await this._qrEnginePromise) instanceof Worker || (this._qrEnginePromise = e.createQrEngine());\n        c ? (this._onDecode ? this._onDecode(c) : this._legacyOnDecode && this._legacyOnDecode(c.data), this.$codeOutlineHighlight && (clearTimeout(this._codeOutlineHighlightRemovalTimeout), this._codeOutlineHighlightRemovalTimeout = void 0, this.$codeOutlineHighlight.setAttribute(\"viewBox\", `${this._scanRegion.x || 0} ` + `${this._scanRegion.y || 0} ` + `${this._scanRegion.width || this.$video.videoWidth} ` + `${this._scanRegion.height || this.$video.videoHeight}`), this.$codeOutlineHighlight.firstElementChild.setAttribute(\"points\", c.cornerPoints.map(_ref => {\n          let {\n            x: d,\n            y: f\n          } = _ref;\n          return `${d},${f}`;\n        }).join(\" \")), this.$codeOutlineHighlight.style.display = \"\")) : this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout && (this._codeOutlineHighlightRemovalTimeout = setTimeout(() => this.$codeOutlineHighlight.style.display = \"none\", 100));\n      }\n\n      this._scanFrame();\n    });\n  }\n\n  _onDecodeError(a) {\n    a !== e.NO_QR_CODE_FOUND && console.log(a);\n  }\n\n  async _getCameraStream() {\n    if (!navigator.mediaDevices) throw \"Camera not found.\";\n    let a = /^(environment|user)$/.test(this._preferredCamera) ? \"facingMode\" : \"deviceId\",\n        b = [{\n      width: {\n        min: 1024\n      }\n    }, {\n      width: {\n        min: 768\n      }\n    }, {}],\n        c = b.map(d => Object.assign({}, d, {\n      [a]: {\n        exact: this._preferredCamera\n      }\n    }));\n\n    for (let d of [...c, ...b]) try {\n      let f = await navigator.mediaDevices.getUserMedia({\n        video: d,\n        audio: !1\n      }),\n          h = this._getFacingMode(f) || (d.facingMode ? this._preferredCamera : \"environment\" === this._preferredCamera ? \"user\" : \"environment\");\n      return {\n        stream: f,\n        facingMode: h\n      };\n    } catch (f) {}\n\n    throw \"Camera not found.\";\n  }\n\n  async _restartVideoStream() {\n    let a = this._paused;\n    (await this.pause(!0)) && !a && this._active && (await this.start());\n  }\n\n  static _stopVideoStream(a) {\n    for (let b of a.getTracks()) b.stop(), a.removeTrack(b);\n  }\n\n  _setVideoMirror(a) {\n    this.$video.style.transform = \"scaleX(\" + (\"user\" === a ? -1 : 1) + \")\";\n  }\n\n  _getFacingMode(a) {\n    return (a = a.getVideoTracks()[0]) ? /rear|back|environment/i.test(a.label) ? \"environment\" : /front|user|face/i.test(a.label) ? \"user\" : null : null;\n  }\n\n  static _drawToCanvas(a, b, c) {\n    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n    c = c || document.createElement(\"canvas\");\n    let f = b && b.x ? b.x : 0,\n        h = b && b.y ? b.y : 0,\n        m = b && b.width ? b.width : a.videoWidth || a.width,\n        n = b && b.height ? b.height : a.videoHeight || a.height;\n    d || (d = b && b.downScaledWidth ? b.downScaledWidth : m, b = b && b.downScaledHeight ? b.downScaledHeight : n, c.width !== d && (c.width = d), c.height !== b && (c.height = b));\n    b = c.getContext(\"2d\", {\n      alpha: !1\n    });\n    b.imageSmoothingEnabled = !1;\n    b.drawImage(a, f, h, m, n, 0, 0, c.width, c.height);\n    return [c, b];\n  }\n\n  static async _loadImage(a) {\n    if (a instanceof Image) return await e._awaitImageLoad(a), a;\n    if (a instanceof HTMLVideoElement || a instanceof HTMLCanvasElement || a instanceof SVGImageElement || \"OffscreenCanvas\" in window && a instanceof OffscreenCanvas || \"ImageBitmap\" in window && a instanceof ImageBitmap) return a;\n\n    if (a instanceof File || a instanceof Blob || a instanceof URL || \"string\" === typeof a) {\n      let b = new Image();\n      b.src = a instanceof File || a instanceof Blob ? URL.createObjectURL(a) : a.toString();\n\n      try {\n        return await e._awaitImageLoad(b), b;\n      } finally {\n        (a instanceof File || a instanceof Blob) && URL.revokeObjectURL(b.src);\n      }\n    } else throw \"Unsupported image type.\";\n  }\n\n  static async _awaitImageLoad(a) {\n    a.complete && 0 !== a.naturalWidth || (await new Promise((b, c) => {\n      let d = f => {\n        a.removeEventListener(\"load\", d);\n        a.removeEventListener(\"error\", d);\n        f instanceof ErrorEvent ? c(\"Image load error\") : b();\n      };\n\n      a.addEventListener(\"load\", d);\n      a.addEventListener(\"error\", d);\n    }));\n  }\n\n  static async _postWorkerMessage(a, b, c, d) {\n    return e._postWorkerMessageSync(await a, b, c, d);\n  }\n\n  static _postWorkerMessageSync(a, b, c, d) {\n    if (!(a instanceof Worker)) return -1;\n    let f = e._workerMessageId++;\n    a.postMessage({\n      id: f,\n      type: b,\n      data: c\n    }, d);\n    return f;\n  }\n\n}\n\ne.DEFAULT_CANVAS_SIZE = 400;\ne.NO_QR_CODE_FOUND = \"No QR code found\";\ne._disableBarcodeDetector = !1;\ne._workerMessageId = 0;\nexport default e;","map":{"version":3,"mappings":"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","names":["QrScanner","a","constructor","onDecode","e","DEFAULT_CANVAS_SIZE","$video","document","$canvas","createElement","c","_onDecode","b","canvasSizeOrCalculateScanRegion","console","_legacyOnDecode","canvasSizeOrOnDecodeErrorOrOptions","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","_preferredCamera","preferredCamera","_legacyCanvasSize","_maxScansPerSecond","maxScansPerSecond","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","_updateOverlay","video","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","highlightScanRegion","highlightCodeOutline","d","$overlay","overlay","f","overlayStyle","position","display","pointerEvents","classList","add","gotExternalOverlay","innerHTML","firstElementChild","animate","transform","duration","iterations","Infinity","direction","easing","videoContainer","insertBefore","nextSibling","insertAdjacentHTML","$codeOutlineHighlight","lastElementChild","_scanRegion","requestAnimationFrame","videoStyle","style","setProperty","visibility","warn","opacity","width","height","parentElement","removeChild","addEventListener","window","_qrEnginePromise","createQrEngine","WORKER_PATH","workerPath","hasCamera","length","listCameras","requestLabels","navigator","mediaDevices","filter","device","openedStream","every","enumerateCameras","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","_flashOn","toggleFlash","turnFlashOff","turnFlashOn","_destroyed","_active","_paused","applyConstraints","advanced","torch","_restartVideoStream","destroy","removeEventListener","stop","_postWorkerMessage","start","Error","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","detailedScanResult","Worker","gotExternalEngine","_postWorkerMessageSync","qrEngineWorker","reject","timeout","onMessage","onError","expectedResponseId","event","data","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","t","imageData","buffer","race","scanResult","rawValue","g","message","test","errorMessage","_disableBarcodeDetector","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","BarcodeDetector","getSupportedFormats","includes","formats","import_308","then","module","createWorker","_scanFrame","x","Math","round","videoWidth","scanRegionSize","y","videoHeight","downScaledWidth","downScaledHeight","videoObjectFit","videoScaledWidth","elementWidth","videoScaledHeight","elementHeight","videoAspectRatio","elementAspectRatio","min","videoY","lengthValue","parseFloat","endsWith","k","regionWidth","regionHeight","top","elementY","regionY","left","elementX","isVideoMirrored","videoX","regionX","points","point","scaleFactorX","offsetX","scaleFactorY","offsetY","paused","ended","requestVideoFrameCallback","readyState","timeSinceLastScan","minimumTimeBetweenScans","_lastScanTimestamp","Date","now","result","_codeOutlineHighlightRemovalTimeout","undefined","setAttribute","join","log","constraint","preferenceType","exact","constraints","wasPaused","track","removeTrack","_getFacingMode","videoStream","videoTrack","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise","type","transfer","postMessage"],"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/node_modules/qr-scanner/src/qr-scanner.ts"],"sourcesContent":["class QrScanner {\n    static readonly DEFAULT_CANVAS_SIZE = 400;\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\n    private static _disableBarcodeDetector = false;\n    private static _workerMessageId = 0;\n\n    /** @deprecated */\n    static set WORKER_PATH(workerPath: string) {\n        console.warn('Setting QrScanner.WORKER_PATH is not required and not supported anymore. '\n            + 'Have a look at the README for new setup instructions.');\n    }\n\n    static async hasCamera(): Promise<boolean> {\n        try {\n            return !!(await QrScanner.listCameras(false)).length;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\n        if (!navigator.mediaDevices) return [];\n\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\n        // ask for camera permission by opening a stream.\n        let openedStream: MediaStream | undefined;\n        try {\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n        } catch (e) {\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\n            // and some browsers disallow a second stream.\n        }\n\n        try {\n            return (await enumerateCameras()).map((camera, i) => ({\n                id: camera.deviceId,\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            }));\n        } finally {\n            // close the stream we just opened for getting camera access for listing the device labels\n            if (openedStream) {\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(openedStream);\n            }\n        }\n    }\n\n    readonly $video: HTMLVideoElement;\n    readonly $canvas: HTMLCanvasElement;\n    readonly $overlay?: HTMLDivElement;\n    private readonly $codeOutlineHighlight?: SVGSVGElement;\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\n    private readonly _legacyOnDecode?: (result: string) => void;\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\n    private readonly _maxScansPerSecond: number = 25;\n    private _lastScanTimestamp: number = -1;\n    private _scanRegion: QrScanner.ScanRegion;\n    private _codeOutlineHighlightRemovalTimeout?: number;\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\n    private _active: boolean = false;\n    private _paused: boolean = false;\n    private _flashOn: boolean = false;\n    private _destroyed: boolean = false;\n\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: QrScanner.ScanResult) => void,\n        options: {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        canvasSize?: number,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\n            // we got an options object using the new api\n            this._onDecode = onDecode as QrScanner['_onDecode'];\n        } else {\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                    + 'the future');\n            } else {\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\n                // if an options object was provided. However, in the future once legacy support is removed, the options\n                // object should become optional.\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\n            }\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\n        }\n\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : {};\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : this._onDecodeError);\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\n            ? canvasSizeOrCalculateScanRegion\n            : this._calculateScanRegion);\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\n                ? canvasSizeOrCalculateScanRegion\n                : this._legacyCanvasSize;\n        this._maxScansPerSecond = options.maxScansPerSecond || this._maxScansPerSecond;\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        this._updateOverlay = this._updateOverlay.bind(this);\n\n        // @ts-ignore\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        // @ts-ignore\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        const videoContainer = video.parentElement!;\n\n        if (options.highlightScanRegion || options.highlightCodeOutline) {\n            const gotExternalOverlay = !!options.overlay;\n            this.$overlay = options.overlay || document.createElement('div');\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.position = 'absolute';\n            overlayStyle.display = 'none';\n            overlayStyle.pointerEvents = 'none';\n            this.$overlay.classList.add('scan-region-highlight');\n            if (!gotExternalOverlay && options.highlightScanRegion) {\n                // default style; can be overwritten via css, e.g. by changing the svg's stroke color, hiding the\n                // .scan-region-highlight-svg, setting a border, outline, background, etc.\n                this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" '\n                    + 'preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;'\n                    + 'fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\">'\n                    + '<path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 '\n                    + '0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n                try {\n                    this.$overlay.firstElementChild!.animate({ transform: ['scale(.98)', 'scale(1.01)'] }, {\n                        duration: 400,\n                        iterations: Infinity,\n                        direction: 'alternate',\n                        easing: 'ease-in-out',\n                    });\n                } catch (e) {}\n                videoContainer.insertBefore(this.$overlay, this.$video.nextSibling);\n            }\n            if (options.highlightCodeOutline) {\n                // default style; can be overwritten via css\n                this.$overlay.insertAdjacentHTML(\n                    'beforeend',\n                    '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;'\n                        + 'height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;'\n                        + 'stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>',\n                );\n                this.$codeOutlineHighlight = this.$overlay.lastElementChild as SVGSVGElement;\n            }\n        }\n        this._scanRegion = this._calculateScanRegion(video);\n\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const videoStyle = window.getComputedStyle(video);\n            if (videoStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (videoStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = '0';\n                video.style.width = '0';\n                video.style.height = '0';\n                if (this.$overlay && this.$overlay.parentElement) {\n                    this.$overlay.parentElement.removeChild(this.$overlay);\n                }\n                // @ts-ignore\n                delete this.$overlay!;\n                // @ts-ignore\n                delete this.$codeOutlineHighlight!;\n            }\n\n            if (this.$overlay) {\n                this._updateOverlay();\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n        window.addEventListener('resize', this._updateOverlay);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    async hasFlash(): Promise<boolean> {\n        let stream: MediaStream | undefined;\n        try {\n            if (this.$video.srcObject) {\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\n                stream = this.$video.srcObject;\n            } else {\n                stream = (await this._getCameraStream()).stream;\n            }\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\n        } catch (e) {\n            return false;\n        } finally {\n            // close the stream we just opened for detecting whether it supports flash\n            if (stream && stream !== this.$video.srcObject) {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(stream);\n            }\n        }\n    }\n\n    isFlashOn(): boolean {\n        return this._flashOn;\n    }\n\n    async toggleFlash(): Promise<void> {\n        if (this._flashOn) {\n            await this.turnFlashOff();\n        } else {\n            await this.turnFlashOn();\n        }\n    }\n\n    async turnFlashOn(): Promise<void> {\n        if (this._flashOn || this._destroyed) return;\n        this._flashOn = true;\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\n        try {\n            if (!await this.hasFlash()) throw 'No flash available';\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\n                // @ts-ignore: constraint 'torch' is unknown to ts\n                advanced: [{ torch: true }],\n            });\n        } catch (e) {\n            this._flashOn = false;\n            throw e;\n        }\n    }\n\n    async turnFlashOff(): Promise<void> {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        await this._restartVideoStream();\n    }\n\n    destroy(): void {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n        window.removeEventListener('resize', this._updateOverlay);\n\n        this._destroyed = true;\n        this._flashOn = false;\n        this.stop(); // sets this._paused = true and this._active = false\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    async start(): Promise<void> {\n        if (this._destroyed) throw new Error('The QR scanner can not be started as it had been destroyed.');\n        if (this._active && !this._paused) return;\n\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n\n        this._active = true;\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            await this.$video.play();\n            return;\n        }\n\n        try {\n            const { stream, facingMode } = await this._getCameraStream();\n            if (!this._active || this._paused) {\n                // was stopped in the meantime\n                QrScanner._stopVideoStream(stream);\n                return;\n            }\n            this._setVideoMirror(facingMode);\n            this.$video.srcObject = stream;\n            await this.$video.play();\n\n            // Restart the flash if it was previously on\n            if (this._flashOn) {\n                this._flashOn = false; // force turnFlashOn to restart the flash\n                this.turnFlashOn().catch(() => {});\n            }\n        } catch (e) {\n            if (this._paused) return;\n            this._active = false;\n            throw e;\n        }\n    }\n\n    stop(): void {\n        this.pause();\n        this._active = false;\n    }\n\n    async pause(stopStreamImmediately = false): Promise<boolean> {\n        this._paused = true;\n        if (!this._active) return true;\n        this.$video.pause();\n\n        if (this.$overlay) {\n            this.$overlay.style.display = 'none';\n        }\n\n        const stopStream = () => {\n            if (this.$video.srcObject instanceof MediaStream) {\n                // revoke srcObject only if it's a stream which was likely set by us\n                QrScanner._stopVideoStream(this.$video.srcObject);\n                this.$video.srcObject = null;\n            }\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return true;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        if (!this._paused) return false;\n        stopStream();\n        return true;\n    }\n\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\n        if (facingModeOrDeviceId === this._preferredCamera) return;\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        await this._restartVideoStream();\n    }\n\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        options: {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    ): Promise<QrScanner.ScanResult>;\n    /** @deprecated */\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegion?: QrScanner.ScanRegion | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing?: boolean,\n        alsoTryWithoutScanRegion?: boolean,\n    ): Promise<string>;\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        } | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing: boolean = false,\n        alsoTryWithoutScanRegion: boolean = false,\n    ): Promise<string | QrScanner.ScanResult> {\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\n        let returnDetailedScanResult = false;\n        if (scanRegionOrOptions && (\n            'scanRegion' in scanRegionOrOptions\n            || 'qrEngine' in scanRegionOrOptions\n            || 'canvas' in scanRegionOrOptions\n            || 'disallowCanvasResizing' in scanRegionOrOptions\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\n            || 'returnDetailedScanResult' in scanRegionOrOptions\n        )) {\n            // we got an options object using the new api\n            scanRegion = scanRegionOrOptions.scanRegion;\n            qrEngine = scanRegionOrOptions.qrEngine;\n            canvas = scanRegionOrOptions.canvas;\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\n            returnDetailedScanResult = true;\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\n        } else {\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\n            // an options object was provided. However, in the future once legacy support is removed, the options object\n            // should become optional.\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\n                + 'new api today, you can pass returnDetailedScanResult: true.');\n        }\n\n        const gotExternalEngine = !!qrEngine;\n\n        try {\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n                | SVGImageElement;\n            let canvasContext: CanvasRenderingContext2D;\n            [qrEngine, image] = await Promise.all([\n                qrEngine || QrScanner.createQrEngine(),\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\n            ]);\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n            let detailedScanResult: QrScanner.ScanResult;\n\n            if (qrEngine instanceof Worker) {\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\n                if (!gotExternalEngine) {\n                    // Enable scanning of inverted color qr codes.\n                    QrScanner._postWorkerMessageSync(qrEngineWorker, 'inversionMode', 'both');\n                }\n                detailedScanResult = await new Promise((resolve, reject) => {\n                    let timeout: number;\n                    let onMessage: (event: MessageEvent) => void;\n                    let onError: (error: ErrorEvent | string) => void;\n                    let expectedResponseId = -1;\n                    onMessage = (event: MessageEvent) => {\n                        if (event.data.id !== expectedResponseId) {\n                            return;\n                        }\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve({\n                                data: event.data.data,\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\n                            });\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (error: ErrorEvent | string) => {\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngineWorker.addEventListener('message', onMessage);\n                    qrEngineWorker.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\n                    expectedResponseId = QrScanner._postWorkerMessageSync(\n                        qrEngineWorker,\n                        'decode',\n                        imageData,\n                        [imageData.data.buffer],\n                    );\n                });\n            } else {\n                detailedScanResult = await Promise.race([\n                    new Promise<QrScanner.ScanResult>((resolve, reject) => window.setTimeout(\n                        () => reject('Scanner error: timeout'),\n                        10000,\n                    )),\n                    (async (): Promise<QrScanner.ScanResult> => {\n                        try {\n                            const [scanResult] = await qrEngine.detect(canvas!);\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\n                            return {\n                                data: scanResult.rawValue,\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\n                            };\n                        } catch (e) {\n                            const errorMessage = (e as Error).message || e as string;\n                            if (/not implemented|service unavailable/.test(errorMessage)) {\n                                // Not implemented can apparently for some reason happen even though getSupportedFormats\n                                // in createQrScanner reported that it's supported, see issue #98.\n                                // Service unavailable can happen after some time when the BarcodeDetector crashed and\n                                // can theoretically be recovered from by creating a new BarcodeDetector. However, in\n                                // newer browsers this issue does not seem to be present anymore and therefore we do not\n                                // apply this optimization anymore but just set _disableBarcodeDetector in both cases.\n                                // Also note that if we got an external qrEngine that crashed, we should possibly notify\n                                // the caller about it, but we also don't do this here, as it's such an unlikely case.\n                                QrScanner._disableBarcodeDetector = true;\n                                // retry without passing the broken BarcodeScanner instance\n                                return QrScanner.scanImage(imageOrFileOrBlobOrUrl, {\n                                    scanRegion,\n                                    canvas,\n                                    disallowCanvasResizing,\n                                    alsoTryWithoutScanRegion,\n                                });\n                            }\n                            throw `Scanner error: ${errorMessage}`;\n                        }\n                    })(),\n                ]);\n            }\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } catch (e) {\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\n            const detailedScanResult = await QrScanner.scanImage(\n                imageOrFileOrBlobOrUrl,\n                { qrEngine, canvas, disallowCanvasResizing },\n            );\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } finally {\n            if (!gotExternalEngine) {\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\n            }\n        }\n    }\n\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations work also well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations scan normal and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    static async createQrEngine(): Promise<Worker | BarcodeDetector>;\n    /** @deprecated */\n    static async createQrEngine(workerPath: string): Promise<Worker | BarcodeDetector>;\n    static async createQrEngine(workerPath?: string): Promise<Worker | BarcodeDetector> {\n        if (workerPath) {\n            console.warn('Specifying a worker path is not required and not supported anymore.');\n        }\n        const useNativeBarcodeDetector = !QrScanner._disableBarcodeDetector\n            && ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n                ? (await BarcodeDetector.getSupportedFormats()).includes('qr_code')\n                : false);\n        return useNativeBarcodeDetector\n            ? new BarcodeDetector({ formats: ['qr_code'] })\n            // @ts-ignore no types defined\n            : (import('./qr-scanner-worker.min.js') as Promise<{ createWorker: () => Worker }>)\n                .then((module) => module.createWorker());\n    }\n\n    private _onPlay(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n        if (this.$overlay) {\n            this.$overlay.style.display = '';\n        }\n        this._scanFrame();\n    }\n\n    private _onLoadedMetaData(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n    }\n\n    private _onVisibilityChange(): void {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    private _updateOverlay(): void {\n        requestAnimationFrame(() => {\n            // Running in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle\n            // and offsetWidth, offsetHeight, offsetLeft, offsetTop.\n            if (!this.$overlay) return;\n            const video = this.$video;\n            const videoWidth = video.videoWidth;\n            const videoHeight = video.videoHeight;\n            const elementWidth = video.offsetWidth;\n            const elementHeight = video.offsetHeight;\n            const elementX = video.offsetLeft;\n            const elementY = video.offsetTop;\n\n            const videoStyle = window.getComputedStyle(video);\n            const videoObjectFit = videoStyle.objectFit;\n            const videoAspectRatio = videoWidth / videoHeight;\n            const elementAspectRatio = elementWidth / elementHeight;\n            let videoScaledWidth: number;\n            let videoScaledHeight: number;\n            switch (videoObjectFit) {\n                case 'none':\n                    videoScaledWidth = videoWidth;\n                    videoScaledHeight = videoHeight;\n                    break;\n                case 'fill':\n                    videoScaledWidth = elementWidth;\n                    videoScaledHeight = elementHeight;\n                    break;\n                default: // 'cover', 'contains', 'scale-down'\n                    if (videoObjectFit === 'cover'\n                        ? videoAspectRatio > elementAspectRatio\n                        : videoAspectRatio < elementAspectRatio) {\n                        // The scaled height is the element height\n                        // - for 'cover' if the video aspect ratio is wider than the element aspect ratio\n                        //   (scaled height matches element height and scaled width overflows element width)\n                        // - for 'contains'/'scale-down' if element aspect ratio is wider than the video aspect ratio\n                        //   (scaled height matched element height and element width overflows scaled width)\n                        videoScaledHeight = elementHeight;\n                        videoScaledWidth = videoScaledHeight * videoAspectRatio;\n                    } else {\n                        videoScaledWidth = elementWidth;\n                        videoScaledHeight = videoScaledWidth / videoAspectRatio;\n                    }\n                    if (videoObjectFit === 'scale-down') {\n                        // for 'scale-down' the dimensions are the minimum of 'contains' and 'none'\n                        videoScaledWidth = Math.min(videoScaledWidth, videoWidth);\n                        videoScaledHeight = Math.min(videoScaledHeight, videoHeight);\n                    }\n            }\n\n            // getComputedStyle is so nice to convert keywords (left, center, right, top, bottom) to percent and makes\n            // sure to set the default of 50% if only one or no component was provided, therefore we can be sure that\n            // both components are set. Additionally, it converts units other than px (e.g. rem) to px.\n            const [videoX, videoY] = videoStyle.objectPosition.split(' ').map((length, i) => {\n                const lengthValue = parseFloat(length);\n                return length.endsWith('%')\n                    ? (!i ? elementWidth - videoScaledWidth : elementHeight - videoScaledHeight) * lengthValue / 100\n                    : lengthValue;\n            });\n\n            const regionWidth = this._scanRegion.width || videoWidth;\n            const regionHeight = this._scanRegion.height || videoHeight;\n            const regionX = this._scanRegion.x || 0;\n            const regionY = this._scanRegion.y || 0;\n\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.width = `${regionWidth / videoWidth * videoScaledWidth}px`;\n            overlayStyle.height = `${regionHeight / videoHeight * videoScaledHeight}px`;\n            overlayStyle.top = `${elementY + videoY + regionY / videoHeight * videoScaledHeight}px`;\n            const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\n            overlayStyle.left = `${elementX\n                + (isVideoMirrored ? elementWidth - videoX - videoScaledWidth : videoX)\n                + (isVideoMirrored ? videoWidth - regionX - regionWidth : regionX) / videoWidth * videoScaledWidth}px`;\n            // apply same mirror as on video\n            overlayStyle.transform = video.style.transform;\n        });\n    }\n\n    private static _convertPoints(\n        points: QrScanner.Point[],\n        scanRegion?: QrScanner.ScanRegion | null,\n    ): QrScanner.Point[] {\n        if (!scanRegion) return points;\n        const offsetX = scanRegion.x || 0;\n        const offsetY = scanRegion.y || 0;\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\n            ? scanRegion.width / scanRegion.downScaledWidth\n            : 1;\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\n            ? scanRegion.height / scanRegion.downScaledHeight\n            : 1;\n        for (const point of points) {\n            point.x = point.x * scaleFactorX + offsetX;\n            point.y = point.y * scaleFactorY + offsetY;\n        }\n        return points;\n    }\n\n    private _scanFrame(): void {\n        if (!this._active || this.$video.paused || this.$video.ended) return;\n        // If requestVideoFrameCallback is available use that to avoid unnecessary scans on the same frame as the\n        // camera's framerate can be lower than the screen refresh rate and this._maxScansPerSecond, especially in dark\n        // settings where the exposure time is longer. Both, requestVideoFrameCallback and requestAnimationFrame are not\n        // being fired if the tab is in the background, which is what we want.\n        const requestFrame = 'requestVideoFrameCallback' in this.$video\n            // @ts-ignore\n            ? this.$video.requestVideoFrameCallback.bind(this.$video)\n            : requestAnimationFrame;\n        requestFrame(async () => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n\n            const timeSinceLastScan = Date.now() - this._lastScanTimestamp;\n            const minimumTimeBetweenScans = 1000 / this._maxScansPerSecond;\n            if (timeSinceLastScan < minimumTimeBetweenScans) {\n                await new Promise((resolve) => setTimeout(resolve, minimumTimeBetweenScans - timeSinceLastScan));\n            }\n            // console.log('Scan rate:', Math.round(1000 / (Date.now() - this._lastScanTimestamp)));\n            this._lastScanTimestamp = Date.now();\n\n            let result: QrScanner.ScanResult | undefined;\n            try {\n                result = await QrScanner.scanImage(this.$video, {\n                    scanRegion: this._scanRegion,\n                    qrEngine: this._qrEnginePromise,\n                    canvas: this.$canvas,\n                });\n            } catch (error) {\n                if (!this._active) return;\n                this._onDecodeError(error as Error | string);\n            }\n\n            if (QrScanner._disableBarcodeDetector && !(await this._qrEnginePromise instanceof Worker)) {\n                // replace the disabled BarcodeDetector\n                this._qrEnginePromise = QrScanner.createQrEngine();\n            }\n\n            if (result) {\n                if (this._onDecode) {\n                    this._onDecode(result);\n                } else if (this._legacyOnDecode) {\n                    this._legacyOnDecode(result.data);\n                }\n\n                if (this.$codeOutlineHighlight) {\n                    clearTimeout(this._codeOutlineHighlightRemovalTimeout);\n                    this._codeOutlineHighlightRemovalTimeout = undefined;\n                    this.$codeOutlineHighlight.setAttribute(\n                        'viewBox',\n                        `${this._scanRegion.x || 0} `\n                            + `${this._scanRegion.y || 0} `\n                            + `${this._scanRegion.width || this.$video.videoWidth} `\n                            + `${this._scanRegion.height || this.$video.videoHeight}`,\n                    );\n                    const polygon = this.$codeOutlineHighlight.firstElementChild!;\n                    polygon.setAttribute('points', result.cornerPoints.map(({x, y}) => `${x},${y}`).join(' '));\n                    this.$codeOutlineHighlight.style.display = '';\n                }\n            } else if (this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout) {\n                // hide after timeout to make it flash less when on some frames the QR code is detected and on some not\n                this._codeOutlineHighlightRemovalTimeout = setTimeout(\n                    () => this.$codeOutlineHighlight!.style.display = 'none',\n                    100,\n                );\n            }\n\n            this._scanFrame();\n        });\n    }\n\n    private _onDecodeError(error: Error | string): void {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\n        if (!navigator.mediaDevices) throw 'Camera not found.';\n\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                const facingMode = this._getFacingMode(stream)\n                    || (constraints.facingMode\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\n                        : (this._preferredCamera === 'environment'\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\n                        )\n                    );\n                return { stream, facingMode };\n            } catch (e) {}\n        }\n\n        throw 'Camera not found.';\n    }\n\n    private async _restartVideoStream(): Promise<void> {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        const paused = await this.pause(true);\n        if (!paused || wasPaused || !this._active) return;\n        await this.start();\n    }\n\n    private static _stopVideoStream(stream : MediaStream): void {\n        for (const track of stream.getTracks()) {\n            track.stop(); //  note that this will also automatically turn the flashlight off\n            stream.removeTrack(track);\n        }\n    }\n\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode === 'user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    private static _drawToCanvas(\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement,\n        scanRegion?: QrScanner.ScanRegion | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing= false,\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width\n            ? scanRegion.width\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\n        const scanRegionHeight = scanRegion && scanRegion.height\n            ? scanRegion.height\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false })!;\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height,\n        );\n        return [canvas, context];\n    }\n\n    private static async _loadImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n        | SVGImageElement > {\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl.toString();\n            }\n            try {\n                await QrScanner._awaitImageLoad(image);\n                return image;\n            } finally {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n            }\n        } else {\n            throw 'Unsupported image type.';\n        }\n    }\n\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\n        await new Promise<void>((resolve, reject) => {\n            const listener = (event: ErrorEvent | Event) => {\n                image.removeEventListener('load', listener);\n                image.removeEventListener('error', listener);\n                if (event instanceof ErrorEvent) {\n                    reject('Image load error');\n                } else {\n                    resolve();\n                }\n            };\n            image.addEventListener('load', listener);\n            image.addEventListener('error', listener);\n        });\n    }\n\n    private static async _postWorkerMessage(\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): Promise<number> {\n        return QrScanner._postWorkerMessageSync(await qrEngineOrQrEnginePromise, type, data, transfer);\n    }\n\n    // sync version of _postWorkerMessage without performance overhead of async functions\n    private static _postWorkerMessageSync(\n        qrEngine: Worker | BarcodeDetector,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): number {\n        if (!(qrEngine instanceof Worker)) return -1;\n        const id = QrScanner._workerMessageId++;\n        qrEngine.postMessage({\n            id,\n            type,\n            data,\n        }, transfer);\n        return id;\n    }\n}\n\ndeclare namespace QrScanner {\n    export interface ScanRegion {\n        x?: number;\n        y?: number;\n        width?: number;\n        height?: number;\n        downScaledWidth?: number;\n        downScaledHeight?: number;\n    }\n\n    export type FacingMode = 'environment' | 'user';\n    export type DeviceId = string;\n\n    export interface Camera {\n        id: DeviceId;\n        label: string;\n    }\n\n    export type InversionMode = 'original' | 'invert' | 'both';\n\n    export interface Point {\n        x: number;\n        y: number;\n    }\n\n    export interface ScanResult {\n        data: string;\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\n        cornerPoints: QrScanner.Point[];\n    }\n}\n\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\ndeclare class BarcodeDetector {\n    constructor(options?: { formats: string[] });\n    static getSupportedFormats(): Promise<string[]>;\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\n}\n\nexport default QrScanner;\n"]},"metadata":{},"sourceType":"module"}