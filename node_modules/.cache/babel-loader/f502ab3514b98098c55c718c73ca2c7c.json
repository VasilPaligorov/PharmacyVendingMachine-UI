{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js\";\nimport React from \"react\";\nimport \"./../../../css/login.css\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreateMedicine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMedicine = event => {\n      this.setState({\n        medicine: event.target.value\n      });\n    };\n\n    this.getNeedsPrescription = event => {\n      this.setState({\n        needsPrescription: event.target.value\n      });\n    };\n\n    this.state = {\n      medicine: \"\",\n      needsPrescription: \"\",\n      medicines: []\n    };\n    this.getMedicine = this.getMedicine.bind(this);\n    this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n  }\n\n  componentDidMount() {\n    const headers = new H();\n    headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n    fetch(\"http://localhost:8081/medicines\", {\n      headers: headers\n    }).then(response => response.json()).then(data => {\n      let names = [];\n      data.forEach(element => {\n        names.push(element.name);\n      });\n      names.sort();\n      this.setState({\n        medicines: names\n      });\n    });\n    this.medicineInput = document.querySelector('#medicine');\n    this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n  }\n\n  createMedicine() {\n    this.validateForm();\n\n    if (this.isFormValid() === true) {\n      console.log('1');\n    }\n  }\n\n  validateForm() {\n    if (!this.state.medicines.includes(this.state.medicine)) {\n      this.setError(this.medicineInput, \"Invalid medicine\");\n    } else this.setSuccess(this.medicineInput);\n\n    needsPrescription = [\"Needs prescription\", \"Doesn't needs prescription\"];\n\n    if (needsPrescription.includes(this.state.needsPrescription) === '') {\n      this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n    } else this.setSuccess(this.needsPrescriptionInput);\n  }\n\n  isFormValid() {\n    const inputContainers = this.form.querySelectorAll('.input-group');\n    let result = true;\n    inputContainers.forEach(container => {\n      if (container.classList.contains('error')) {\n        result = false;\n      }\n    });\n    return result;\n  }\n\n  setError(element, errorMessage) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('success')) {\n      parent.classList.remove('success');\n    }\n\n    parent.classList.add('error');\n    const paragraph = parent.querySelector('p');\n    paragraph.textContent = errorMessage;\n  }\n\n  setSuccess(element) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('error')) {\n      parent.classList.remove('error');\n    }\n\n    parent.classList.add('success');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"login\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"create-account-form\",\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"medicine\",\n            children: \"medicine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            list: \"medicines\",\n            name: \"medicine\",\n            value: this.state.medicineInput,\n            onChange: event => {\n              this.getMedicine(event);\n            },\n            id: \"medicine\",\n            autoComplete: \"off\",\n            placeholder: \"Choose medicine:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n            id: \"medicines\",\n            children: this.state.medicines.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"needsPrescription\",\n            children: \"medicine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            list: \"needsPrescription\",\n            name: \"needsPrescription\",\n            value: this.needsPrescriptionInput,\n            onChange: event => {\n              this.getNeedsPrescription(event);\n            },\n            id: \"needsPrescription\",\n            autoComplete: \"off\",\n            placeholder: \"Choose medicine:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n            id: \"needsPrescription\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Needs prescription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Doesn't needs prescription\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Error Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: () => this.createMedicine(),\n          children: \"Create Medicine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CreateMedicine;","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Desktop/Admin/medicines/createMedicine.js"],"names":["React","toast","CreateMedicine","Component","constructor","props","getMedicine","event","setState","medicine","target","value","getNeedsPrescription","needsPrescription","state","medicines","bind","componentDidMount","headers","H","set","btoa","localStorage","getItem","fetch","then","response","json","data","names","forEach","element","push","name","sort","medicineInput","document","querySelector","needsPrescriptionInput","createMedicine","validateForm","isFormValid","console","log","includes","setError","setSuccess","inputContainers","form","querySelectorAll","result","container","classList","contains","errorMessage","parent","parentElement","remove","add","paragraph","textContent","render","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./../../../css/login.css\";\n\nimport { toast } from 'react-toastify';\n\nclass CreateMedicine extends React.Component {\n    form;\n    medicineInput;\n    needsPrescriptionInput;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            medicine: \"\", needsPrescription: \"\", medicines: [],\n        };\n        this.getMedicine = this.getMedicine.bind(this);\n        this.getNeedsPrescription = this.getNeedsPrescription.bind(this);\n    }\n\n    componentDidMount() {\n        const headers = new H\n        headers.set('Authorization', 'Basic ' + btoa(localStorage.getItem('email') + \":\" + localStorage.getItem('password')));\n        fetch(\"http://localhost:8081/medicines\", {\n            headers: headers,\n        })\n            .then(response => response.json())\n            .then(data => {\n                let names = [];\n                data.forEach(element => {\n                    names.push(element.name)\n                })\n                names.sort();\n                this.setState({ medicines: names })\n            });\n        this.medicineInput = document.querySelector('#medicine');\n        this.needsPrescriptionInput = document.querySelector('#needsPrescription');\n\n    }\n\n\n    getMedicine = (event) => {\n        this.setState({\n            medicine: event.target.value\n        })\n    };\n\n    getNeedsPrescription = (event) => {\n        this.setState({\n            needsPrescription: event.target.value\n        })\n    };\n\n    createMedicine() {\n        this.validateForm();\n        if (this.isFormValid() === true) {\n            console.log('1');\n        }\n    }\n\n\n    validateForm() {\n        if (!this.state.medicines.includes(this.state.medicine)) {\n            this.setError(this.medicineInput, \"Invalid medicine\");\n        } else\n            this.setSuccess(this.medicineInput);\n\n        needsPrescription = [\"Needs prescription\", \"Doesn't needs prescription\"]\n        if (needsPrescription.includes(this.state.needsPrescription) === '') {\n            this.setError(this.needsPrescriptionInput, \"Invalid input!\");\n        } else\n            this.setSuccess(this.needsPrescriptionInput);\n    }\n\n\n    isFormValid() {\n        const inputContainers = this.form.querySelectorAll('.input-group');\n        let result = true;\n        inputContainers.forEach((container) => {\n            if (container.classList.contains('error')) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    setError(element, errorMessage) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('success')) {\n            parent.classList.remove('success');\n        }\n        parent.classList.add('error');\n        const paragraph = parent.querySelector('p');\n        paragraph.textContent = errorMessage;\n    }\n\n    setSuccess(element) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('error')) {\n            parent.classList.remove('error');\n        }\n        parent.classList.add('success');\n    }\n\n    render() {\n        return (\n            <div id=\"login\">\n                <form id=\"create-account-form\" className=\"content\">\n                    <div className=\"title\">\n                        <h2>Sign In</h2>\n                    </div>\n\n                    <div className=\"input-group\">\n                        <label htmlFor=\"medicine\">medicine</label>\n                        <input list=\"medicines\" name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                            this.getMedicine(event)\n                        }} id=\"medicine\" autoComplete=\"off\"\n                            placeholder=\"Choose medicine:\" />\n                        <datalist id=\"medicines\">\n                            {this.state.medicines.map(element =>\n                                <option value={element} />\n                            )}\n                        </datalist>\n                        <p>Error Message</p>\n                    </div>\n\n                    <div className=\"input-group\">\n                        <label htmlFor=\"needsPrescription\">medicine</label>\n                        <input list=\"needsPrescription\" name=\"needsPrescription\" value={this.needsPrescriptionInput} onChange={event => {\n                            this.getNeedsPrescription(event)\n                        }} id=\"needsPrescription\" autoComplete=\"off\"\n                            placeholder=\"Choose medicine:\" />\n                        <datalist id=\"needsPrescription\">\n                                <option value=\"Needs prescription\" />\n                                <option value=\"Doesn't needs prescription\" />\n                        </datalist>\n                        <p>Error Message</p>\n                    </div>\n\n                    <button type=\"button\" className=\"btn\" onClick={() => this.createMedicine()}>Create Medicine</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default CreateMedicine"]},"metadata":{},"sourceType":"module"}