{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/SharedElements/prescriptions/createPrescription.js\";\nimport React from \"react\";\nimport '../../../css/createPrescription.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreatePrescription extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getEmail = event => {\n      this.setState({\n        email: event.target.value\n      });\n    };\n\n    this.getMedicine = event => {\n      this.setState({\n        medicine: event.target.value\n      });\n    };\n\n    this.getNumber = event => {\n      this.setState({\n        number: event.target.value\n      });\n    };\n\n    this.state = {\n      email: \"\",\n      medicine: \"\",\n      number: \"\"\n    };\n    this.getEmail = this.getEmail.bind(this);\n    this.getMedicine = this.getMedicine.bind(this);\n    this.getNumber = this.getNumber.bind(this);\n  }\n\n  componentDidMount() {\n    this.medicineInput = document.querySelector('#medicine');\n    this.emailInput = document.querySelector('#patient');\n    this.numberInput = document.querySelector('#number');\n  }\n\n  componentWillMount() {\n    let medicines = [];\n    let headers = new Headers();\n    headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem('email') + \":\" + sessionStorage.getItem('password')));\n    headers.set('Content-Type', 'application/json');\n    fetch(\"http://localhost:8081/medicines\", {\n      headers: headers\n    }).then(response => response.json()).then(data => {\n      data.forEach(element => {\n        medicines.push(element.name);\n      });\n    }).then(function () {\n      medicines.sort();\n      const datalist = document.querySelector(\"#medicines\");\n      medicines.forEach(element => {\n        const newMedicine = document.createElement(\"option\");\n        newMedicine.value = element;\n        datalist.appendChild(newMedicine);\n      });\n    });\n  }\n\n  createPrescriptionRow() {\n    const array = [this.medicineInput, this.numberInput, 3];\n    this.validateMedicine(this.medicineInput, this.numberInput);\n\n    if (this.isFormValid()) {\n      const table = document.querySelector(\"#prescription\");\n      const newRow = document.createElement(\"tr\");\n      array.forEach(element => {\n        const newElement = document.createElement(\"td\");\n\n        if (element === 3) {\n          const newButton = document.createElement(\"button\");\n          newButton.classList.add(\"rmvBtn\");\n          newButton.innerText = \"remove\";\n\n          newButton.onclick = () => newRow.parentNode.removeChild(newRow);\n\n          newElement.appendChild(newButton);\n        } else {\n          newElement.classList.add(\"pr\");\n          newElement.innerText = element.value;\n        }\n\n        newRow.appendChild(newElement);\n      });\n      table.appendChild(newRow);\n    }\n  }\n\n  createPrescription() {\n    this.validatePatient();\n\n    if (this.isFormValid()) {\n      let prescription = [];\n      const data = document.querySelectorAll(\".pr\");\n\n      for (let i = 0; i < data.length; i += 2) {\n        prescription.push({\n          \"name\": data[i].innerText,\n          \"amount\": parseInt(data[i + 1].innerText)\n        });\n      }\n\n      if (prescription.length !== 0) {\n        let headers = new Headers();\n        headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem('email') + \":\" + sessionStorage.getItem('password')));\n        headers.set('Content-Type', 'application/json');\n        fetch(\"http://localhost:8081/prescriptions?patient_email=\" + this.state.email.trim(), {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify(prescription)\n        }).then(r => {\n          if (r.status === 200) {\n            window.alert(\"Prescription created!\");\n            window.location.reload();\n          } else if (r.status === 404) this.setError(this.emailInput, \"Invalid patient\");else window.alert(\"Something unexpected happened! Try again!\");\n        });\n      }\n    }\n  }\n\n  isFormValid() {\n    const inputContainers = document.querySelectorAll('.wrapper');\n    let result = true;\n    inputContainers.forEach(container => {\n      if (container.classList.contains('error')) {\n        result = false;\n      }\n    });\n    return result;\n  }\n\n  validateMedicine(medicine, number) {\n    let medicines = [];\n    document.querySelectorAll(\"option\").forEach(element => {\n      medicines.push(element.value);\n    });\n\n    if (!medicines.includes(medicine.value)) {\n      this.setError(medicine, \"Invalid medicine\");\n    } else this.setSuccess(medicine);\n\n    if (number.value.trim() === '') {\n      this.setError(number, \"Enter a number\");\n    } else this.setSuccess(number);\n  }\n\n  setError(element, errorMessage) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('success')) {\n      parent.classList.remove('success');\n    }\n\n    parent.classList.add('error');\n    const paragraph = parent.querySelector('p');\n    paragraph.textContent = errorMessage;\n  }\n\n  setSuccess(element) {\n    const parent = element.parentElement;\n\n    if (parent.classList.contains('error')) {\n      parent.classList.remove('error');\n    }\n\n    parent.classList.add('success');\n  }\n\n  validatePatient() {\n    if (this.state.email.trim() === '') {\n      this.setError(this.emailInput, \"Enter patient\");\n    } else this.setSuccess(this.emailInput);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      id: \"createPrescription\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Create prescription:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"topBar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"patient\",\n              children: \"patient email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"patient\",\n              alue: this.state.email,\n              onChange: event => {\n                this.getEmail(event);\n              },\n              id: \"patient\",\n              autoComplete: \"off\",\n              placeholder: \"Enter patient email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"medicine\",\n              children: \"medicine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              list: \"medicines\",\n              name: \"medicine\",\n              value: this.state.medicineInput,\n              onChange: event => {\n                this.getMedicine(event);\n              },\n              id: \"medicine\",\n              autoComplete: \"off\",\n              placeholder: \"Choose medicine:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n              id: \"medicines\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"number\",\n              children: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"number\",\n              value: this.state.number,\n              onChange: event => {\n                this.getNumber(event);\n              },\n              id: \"number\",\n              placeholder: \"Number of medicines:\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Error Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: () => this.createPrescriptionRow(),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tableContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"prescription\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Medicine\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn last\",\n          type: \"button\",\n          onClick: () => this.createPrescription(),\n          children: \"Create Prescription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CreatePrescription;","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/SharedElements/prescriptions/createPrescription.js"],"names":["React","CreatePrescription","Component","constructor","props","getEmail","event","setState","email","target","value","getMedicine","medicine","getNumber","number","state","bind","componentDidMount","medicineInput","document","querySelector","emailInput","numberInput","componentWillMount","medicines","headers","Headers","set","btoa","sessionStorage","getItem","fetch","then","response","json","data","forEach","element","push","name","sort","datalist","newMedicine","createElement","appendChild","createPrescriptionRow","array","validateMedicine","isFormValid","table","newRow","newElement","newButton","classList","add","innerText","onclick","parentNode","removeChild","createPrescription","validatePatient","prescription","querySelectorAll","i","length","parseInt","trim","method","body","JSON","stringify","r","status","window","alert","location","reload","setError","inputContainers","result","container","contains","includes","setSuccess","errorMessage","parent","parentElement","remove","paragraph","textContent","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport '../../../css/createPrescription.css'\n\nclass CreatePrescription extends React.Component {\n    medicineInput;\n    emailInput;\n    numberInput;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\", medicine: \"\", number: \"\"\n        };\n        this.getEmail = this.getEmail.bind(this);\n        this.getMedicine = this.getMedicine.bind(this);\n        this.getNumber = this.getNumber.bind(this);\n    }\n\n    componentDidMount() {\n        this.medicineInput = document.querySelector('#medicine');\n        this.emailInput = document.querySelector('#patient');\n        this.numberInput = document.querySelector('#number');\n    }\n\n\n    getEmail = (event) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    getMedicine = (event) => {\n        this.setState({\n            medicine: event.target.value\n        })\n    };\n    getNumber = (event) => {\n        this.setState({\n            number: event.target.value\n        })\n    };\n\n\n    componentWillMount() {\n        let medicines = [];\n        let headers = new Headers();\n        headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem('email') + \":\" + sessionStorage.getItem('password')));\n        headers.set('Content-Type', 'application/json');\n        fetch(\"http://localhost:8081/medicines\", {\n            headers: headers,\n        })\n            .then(response => response.json())\n            .then(data => {\n                data.forEach(element => {\n                    medicines.push(element.name)\n                })\n            })\n            .then(function () {\n                medicines.sort();\n                const datalist = document.querySelector(\"#medicines\");\n                medicines.forEach(element => {\n                    const newMedicine = document.createElement(\"option\");\n                    newMedicine.value = element;\n                    datalist.appendChild(newMedicine);\n                });\n\n            })\n\n    }\n\n    createPrescriptionRow() {\n        const array = [this.medicineInput, this.numberInput, 3];\n        this.validateMedicine(this.medicineInput, this.numberInput);\n        if (this.isFormValid()) {\n            const table = document.querySelector(\"#prescription\");\n            const newRow = document.createElement(\"tr\");\n            array.forEach(element => {\n                const newElement = document.createElement(\"td\");\n                if (element === 3) {\n                    const newButton = document.createElement(\"button\");\n                    newButton.classList.add(\"rmvBtn\");\n                    newButton.innerText = \"remove\";\n                    newButton.onclick = () => newRow.parentNode.removeChild(newRow);\n                    newElement.appendChild(newButton);\n                } else {\n                    newElement.classList.add(\"pr\")\n                    newElement.innerText = element.value;\n                }\n                newRow.appendChild(newElement);\n            })\n            table.appendChild(newRow);\n        }\n    }\n\n    createPrescription() {\n        this.validatePatient();\n        if (this.isFormValid()) {\n            let prescription = [];\n            const data = document.querySelectorAll(\".pr\");\n            for (let i = 0; i < data.length; i += 2) {\n                prescription.push({\n                    \"name\": data[i].innerText,\n                    \"amount\": parseInt(data[i + 1].innerText)\n                });\n            }\n            if (prescription.length !== 0) {\n                let headers = new Headers();\n                headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem('email') + \":\" + sessionStorage.getItem('password')));\n                headers.set('Content-Type', 'application/json');\n                fetch(\"http://localhost:8081/prescriptions?patient_email=\" + this.state.email.trim(), {\n                    method: \"POST\",\n                    headers: headers,\n                    body: JSON.stringify(prescription)\n\n                }).then(r => {\n                    if (r.status === 200) {\n                        window.alert(\"Prescription created!\");\n                        window.location.reload();\n                    } else if (r.status === 404)\n                        this.setError(this.emailInput, \"Invalid patient\");\n                    else\n                        window.alert(\"Something unexpected happened! Try again!\");\n                })\n            }\n        }\n    }\n\n    isFormValid() {\n        const inputContainers = document.querySelectorAll('.wrapper');\n        let result = true;\n        inputContainers.forEach((container) => {\n            if (container.classList.contains('error')) {\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    validateMedicine(medicine, number) {\n        let medicines = [];\n        document.querySelectorAll(\"option\").forEach(element => {\n            medicines.push(element.value);\n        })\n        if (!medicines.includes(medicine.value)) {\n            this.setError(medicine, \"Invalid medicine\");\n        } else\n            this.setSuccess(medicine);\n\n        if (number.value.trim() === '') {\n            this.setError(number, \"Enter a number\");\n        } else\n            this.setSuccess(number);\n    }\n\n    setError(element, errorMessage) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('success')) {\n            parent.classList.remove('success');\n        }\n        parent.classList.add('error');\n        const paragraph = parent.querySelector('p');\n        paragraph.textContent = errorMessage;\n    }\n\n    setSuccess(element) {\n        const parent = element.parentElement;\n        if (parent.classList.contains('error')) {\n            parent.classList.remove('error');\n        }\n        parent.classList.add('success');\n    }\n\n    validatePatient() {\n        if (this.state.email.trim() === '') {\n            this.setError(this.emailInput, \"Enter patient\");\n        } else\n            this.setSuccess(this.emailInput);\n    }\n\n\n    render() {\n        return (\n            <div className=\"content\" id=\"createPrescription\">\n                <div className=\"container\">\n                    <h1>Create prescription:</h1>\n                    <div className=\"topBar\">\n                        <div className=\"wrapper\">\n                            <label htmlFor=\"patient\">patient email</label>\n                            <input name=\"patient\" alue={this.state.email} onChange={event => {\n                                this.getEmail(event)\n                            }} id=\"patient\" autoComplete=\"off\" placeholder=\"Enter patient email:\" />\n                            <p>Error Message</p>\n                        </div>\n\n                        <div className=\"wrapper\">\n                            <label htmlFor=\"medicine\">medicine</label>\n                            <input list=\"medicines\" name=\"medicine\" value={this.state.medicineInput} onChange={event => {\n                                this.getMedicine(event)\n                            }} id=\"medicine\" autoComplete=\"off\"\n                                placeholder=\"Choose medicine:\" />\n                            <datalist id=\"medicines\">\n\n                            </datalist>\n                            <p>Error Message</p>\n                        </div>\n\n                        <div className=\"wrapper\">\n                            <label htmlFor=\"number\">number</label>\n                            <input type=\"number\" name=\"number\" value={this.state.number} onChange={event => {\n                                this.getNumber(event)\n                            }} id=\"number\" placeholder=\"Number of medicines:\"\n                                autoComplete=\"off\" />\n                            <p>Error Message</p>\n                        </div>\n\n                        <button className=\"btn\" onClick={() => this.createPrescriptionRow()}>Add</button>\n                    </div>\n                    <div className=\"line\" />\n                    <div className=\"tableContainer\">\n                        <table id=\"prescription\">\n                            <tr>\n                                <th>Medicine</th>\n                                <th>Number</th>\n                                <th>Remove</th>\n                            </tr>\n                        </table>\n                    </div>\n                    <button className=\"btn last\" type=\"button\" onClick={() => this.createPrescription()}>Create Prescription\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreatePrescription;"]},"metadata":{},"sourceType":"module"}