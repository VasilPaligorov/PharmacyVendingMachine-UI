{"ast":null,"code":"var _jsxFileName = \"/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ContinuousQrScanner } from 'react-webcam-qr-scanner.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DemoOneOffScanning() {\n  _s();\n\n  const [qrCode, setQrCode] = useState('');\n\n  function QrDetected(QrCode) {\n    // const machineIP = atob(QrCode);\n    let message = '';\n    let headers = new Headers(); // headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem(\"email\") + \":\" + sessionStorage.getItem(\"password\")));\n\n    headers.set('Content-Type', 'application/json');\n\n    if (QrCode !== '') {\n      fetch(QrCode + \"/configuration/status\", {\n        headers: headers\n      }).then(response => response.json()).then(data => {\n        if (data === true) sessionStorage.setItem('');\n        message = \"Invalid QR code\";\n      }).catch(error => {\n        message = \"Invalid QR code\";\n      });\n      message = \"Invalid QR code\";\n    }\n\n    return message;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Scan Machine QR Code: \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: QrDetected(qrCode)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContinuousQrScanner, {\n      onQrCode: setQrCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DemoOneOffScanning, \"mllj/JYPdze9TmrenfQyB5E/uek=\");\n\n_c = DemoOneOffScanning;\nexport default DemoOneOffScanning;\n\nvar _c;\n\n$RefreshReg$(_c, \"DemoOneOffScanning\");","map":{"version":3,"sources":["/home/vpaligorov/Desktop/PharmacyVendingMachineUI/pvm_ui/src/elements/Mobile/connectToMachine/connectToMachine.js"],"names":["React","useState","ContinuousQrScanner","DemoOneOffScanning","qrCode","setQrCode","QrDetected","QrCode","message","headers","Headers","set","fetch","then","response","json","data","sessionStorage","setItem","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,mBAAT,QAAoC,4BAApC;;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;;AAEA,WAASK,UAAT,CAAoBC,MAApB,EAA4B;AAC1B;AACA,QAAIC,OAAO,GAAG,EAAd;AAEA,QAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd,CAJ0B,CAK1B;;AACAD,IAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,kBAA5B;;AACA,QAAIJ,MAAM,KAAK,EAAf,EAAmB;AACjBK,MAAAA,KAAK,CAACL,MAAM,GAAG,uBAAV,EAAmC;AACtCE,QAAAA,OAAO,EAAEA;AAD6B,OAAnC,CAAL,CAGGI,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIGF,IAJH,CAIQG,IAAI,IAAI;AAEZ,YAAGA,IAAI,KAAG,IAAV,EACEC,cAAc,CAACC,OAAf,CAAuB,EAAvB;AAEFV,QAAAA,OAAO,GAAG,iBAAV;AACD,OAVH,EAWGW,KAXH,CAYIC,KAAK,IAAI;AACPZ,QAAAA,OAAO,GAAG,iBAAV;AACD,OAdL;AAgBEA,MAAAA,OAAO,GAAG,iBAAV;AACH;;AACD,WAAQA,OAAR;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAA,wDACwB;AAAA,kBAAOF,UAAU,CAACF,MAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,cADxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAzCQF,kB;;KAAAA,kB;AA2CT,eAAeA,kBAAf","sourcesContent":["import React, { useState } from 'react'\nimport { ContinuousQrScanner } from 'react-webcam-qr-scanner.ts'\n\nfunction DemoOneOffScanning() {\n  const [qrCode, setQrCode] = useState('')\n\n  function QrDetected(QrCode) {\n    // const machineIP = atob(QrCode);\n    let message = ''\n\n    let headers = new Headers();\n    // headers.set('Authorization', 'Basic ' + btoa(sessionStorage.getItem(\"email\") + \":\" + sessionStorage.getItem(\"password\")));\n    headers.set('Content-Type', 'application/json');\n    if (QrCode !== '') {\n      fetch(QrCode + \"/configuration/status\", {\n        headers: headers\n      })\n        .then(response => response.json())\n        .then(data => {\n          \n          if(data===true)\n            sessionStorage.setItem('')\n\n          message = \"Invalid QR code\"\n        })\n        .catch(\n          error => {\n            message = \"Invalid QR code\"\n          }\n        );\n        message = \"Invalid QR code\"\n    }\n    return (message);\n  }\n\n  return (\n    <div className='content'>\n      <h1>\n        Scan Machine QR Code: <code>{QrDetected(qrCode)}</code>\n      </h1>\n      {/* auto close the webcam once detected QR code */}\n      <ContinuousQrScanner onQrCode={setQrCode} />\n    </div>\n  )\n}\n\nexport default DemoOneOffScanning"]},"metadata":{},"sourceType":"module"}